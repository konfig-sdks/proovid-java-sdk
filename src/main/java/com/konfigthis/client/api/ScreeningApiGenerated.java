/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AmlReport;
import com.konfigthis.client.model.DeleteAmlReport;
import com.konfigthis.client.model.NaturalPersonRequest;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScreeningApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScreeningApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScreeningApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getBearer() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setBearer(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAmlReportCall(String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Screening/AmlReport/{reference}"
            .replace("{" + "reference" + "}", localVarApiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAmlReportValidateBeforeCall(String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling getAmlReport(Async)");
        }

        return getAmlReportCall(reference, _callback);

    }


    private ApiResponse<AmlReport> getAmlReportWithHttpInfo(String reference) throws ApiException {
        okhttp3.Call localVarCall = getAmlReportValidateBeforeCall(reference, null);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAmlReportAsync(String reference, final ApiCallback<AmlReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAmlReportValidateBeforeCall(reference, _callback);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAmlReportRequestBuilder {
        private final String reference;

        private GetAmlReportRequestBuilder(String reference) {
            this.reference = reference;
        }

        /**
         * Build call for getAmlReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAmlReportCall(reference, _callback);
        }


        /**
         * Execute getAmlReport request
         * @return AmlReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AmlReport execute() throws ApiException {
            ApiResponse<AmlReport> localVarResp = getAmlReportWithHttpInfo(reference);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAmlReport request with HTTP info returned
         * @return ApiResponse&lt;AmlReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmlReport> executeWithHttpInfo() throws ApiException {
            return getAmlReportWithHttpInfo(reference);
        }

        /**
         * Execute getAmlReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmlReport> _callback) throws ApiException {
            return getAmlReportAsync(reference, _callback);
        }
    }

    /**
     * 
     * 
     * @param reference  (required)
     * @return GetAmlReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAmlReportRequestBuilder getAmlReport(String reference) throws IllegalArgumentException {
        if (reference == null) throw new IllegalArgumentException("\"reference\" is required but got null");
            

        return new GetAmlReportRequestBuilder(reference);
    }
    private okhttp3.Call getNaturalPersonByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Screening/NaturalPerson/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNaturalPersonByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNaturalPersonById(Async)");
        }

        return getNaturalPersonByIdCall(id, _callback);

    }


    private ApiResponse<AmlReport> getNaturalPersonByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getNaturalPersonByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNaturalPersonByIdAsync(Long id, final ApiCallback<AmlReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNaturalPersonByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNaturalPersonByIdRequestBuilder {
        private final Long id;

        private GetNaturalPersonByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getNaturalPersonById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNaturalPersonByIdCall(id, _callback);
        }


        /**
         * Execute getNaturalPersonById request
         * @return AmlReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AmlReport execute() throws ApiException {
            ApiResponse<AmlReport> localVarResp = getNaturalPersonByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNaturalPersonById request with HTTP info returned
         * @return ApiResponse&lt;AmlReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmlReport> executeWithHttpInfo() throws ApiException {
            return getNaturalPersonByIdWithHttpInfo(id);
        }

        /**
         * Execute getNaturalPersonById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmlReport> _callback) throws ApiException {
            return getNaturalPersonByIdAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return GetNaturalPersonByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetNaturalPersonByIdRequestBuilder getNaturalPersonById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetNaturalPersonByIdRequestBuilder(id);
    }
    private okhttp3.Call removeNaturalPersonCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Screening/NaturalPerson/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeNaturalPersonValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeNaturalPerson(Async)");
        }

        return removeNaturalPersonCall(id, _callback);

    }


    private ApiResponse<DeleteAmlReport> removeNaturalPersonWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = removeNaturalPersonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteAmlReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeNaturalPersonAsync(Long id, final ApiCallback<DeleteAmlReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeNaturalPersonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteAmlReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveNaturalPersonRequestBuilder {
        private final Long id;

        private RemoveNaturalPersonRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for removeNaturalPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeNaturalPersonCall(id, _callback);
        }


        /**
         * Execute removeNaturalPerson request
         * @return DeleteAmlReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public DeleteAmlReport execute() throws ApiException {
            ApiResponse<DeleteAmlReport> localVarResp = removeNaturalPersonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeNaturalPerson request with HTTP info returned
         * @return ApiResponse&lt;DeleteAmlReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteAmlReport> executeWithHttpInfo() throws ApiException {
            return removeNaturalPersonWithHttpInfo(id);
        }

        /**
         * Execute removeNaturalPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteAmlReport> _callback) throws ApiException {
            return removeNaturalPersonAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return RemoveNaturalPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemoveNaturalPersonRequestBuilder removeNaturalPerson(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemoveNaturalPersonRequestBuilder(id);
    }
    private okhttp3.Call submitNaturalPersonScreeningCall(NaturalPersonRequest naturalPersonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = naturalPersonRequest;

        // create path and map variables
        String localVarPath = "/api/Screening/NaturalPerson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitNaturalPersonScreeningValidateBeforeCall(NaturalPersonRequest naturalPersonRequest, final ApiCallback _callback) throws ApiException {
        return submitNaturalPersonScreeningCall(naturalPersonRequest, _callback);

    }


    private ApiResponse<AmlReport> submitNaturalPersonScreeningWithHttpInfo(NaturalPersonRequest naturalPersonRequest) throws ApiException {
        okhttp3.Call localVarCall = submitNaturalPersonScreeningValidateBeforeCall(naturalPersonRequest, null);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitNaturalPersonScreeningAsync(NaturalPersonRequest naturalPersonRequest, final ApiCallback<AmlReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitNaturalPersonScreeningValidateBeforeCall(naturalPersonRequest, _callback);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitNaturalPersonScreeningRequestBuilder {
        private Long naturalPersonId;
        private String firstName;
        private String middleName;
        private String lastName;
        private OffsetDateTime dob;
        private String partialMatch;
        private String document;
        private String documentType;

        private SubmitNaturalPersonScreeningRequestBuilder() {
        }

        /**
         * Set naturalPersonId
         * @param naturalPersonId  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder naturalPersonId(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set dob
         * @param dob  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder dob(OffsetDateTime dob) {
            this.dob = dob;
            return this;
        }
        
        /**
         * Set partialMatch
         * @param partialMatch  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder partialMatch(String partialMatch) {
            this.partialMatch = partialMatch;
            return this;
        }
        
        /**
         * Set document
         * @param document  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder document(String document) {
            this.document = document;
            return this;
        }
        
        /**
         * Set documentType
         * @param documentType  (optional)
         * @return SubmitNaturalPersonScreeningRequestBuilder
         */
        public SubmitNaturalPersonScreeningRequestBuilder documentType(String documentType) {
            this.documentType = documentType;
            return this;
        }
        
        /**
         * Build call for submitNaturalPersonScreening
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NaturalPersonRequest naturalPersonRequest = buildBodyParams();
            return submitNaturalPersonScreeningCall(naturalPersonRequest, _callback);
        }

        private NaturalPersonRequest buildBodyParams() {
            NaturalPersonRequest naturalPersonRequest = new NaturalPersonRequest();
            naturalPersonRequest.naturalPersonId(this.naturalPersonId);
            naturalPersonRequest.firstName(this.firstName);
            naturalPersonRequest.middleName(this.middleName);
            naturalPersonRequest.lastName(this.lastName);
            naturalPersonRequest.dob(this.dob);
            naturalPersonRequest.partialMatch(this.partialMatch);
            naturalPersonRequest.document(this.document);
            naturalPersonRequest.documentType(this.documentType);
            return naturalPersonRequest;
        }

        /**
         * Execute submitNaturalPersonScreening request
         * @return AmlReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AmlReport execute() throws ApiException {
            NaturalPersonRequest naturalPersonRequest = buildBodyParams();
            ApiResponse<AmlReport> localVarResp = submitNaturalPersonScreeningWithHttpInfo(naturalPersonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitNaturalPersonScreening request with HTTP info returned
         * @return ApiResponse&lt;AmlReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmlReport> executeWithHttpInfo() throws ApiException {
            NaturalPersonRequest naturalPersonRequest = buildBodyParams();
            return submitNaturalPersonScreeningWithHttpInfo(naturalPersonRequest);
        }

        /**
         * Execute submitNaturalPersonScreening request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmlReport> _callback) throws ApiException {
            NaturalPersonRequest naturalPersonRequest = buildBodyParams();
            return submitNaturalPersonScreeningAsync(naturalPersonRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return SubmitNaturalPersonScreeningRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubmitNaturalPersonScreeningRequestBuilder submitNaturalPersonScreening() throws IllegalArgumentException {
        return new SubmitNaturalPersonScreeningRequestBuilder();
    }
}

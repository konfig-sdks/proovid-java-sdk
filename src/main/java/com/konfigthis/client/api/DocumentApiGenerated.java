/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DeleteDocumentVerificationResponse;
import com.konfigthis.client.model.DocumentVerificationRequest;
import com.konfigthis.client.model.DocumentVerificationResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getBearer() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setBearer(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCertificateCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Document/DocumentVerification/{id}/certificate.pdf"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificateValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCertificate(Async)");
        }

        return getCertificateCall(id, _callback);

    }


    private ApiResponse<File> getCertificateWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getCertificateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCertificateAsync(Integer id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCertificateRequestBuilder {
        private final Integer id;

        private GetCertificateRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getCertificate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCertificateCall(id, _callback);
        }


        /**
         * Execute getCertificate request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getCertificateWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCertificate request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getCertificateWithHttpInfo(id);
        }

        /**
         * Execute getCertificate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getCertificateAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return GetCertificateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCertificateRequestBuilder getCertificate(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetCertificateRequestBuilder(id);
    }
    private okhttp3.Call verifyDeletionCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Document/DocumentVerification/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDeletionValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling verifyDeletion(Async)");
        }

        return verifyDeletionCall(id, _callback);

    }


    private ApiResponse<DeleteDocumentVerificationResponse> verifyDeletionWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = verifyDeletionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteDocumentVerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyDeletionAsync(Integer id, final ApiCallback<DeleteDocumentVerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDeletionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteDocumentVerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyDeletionRequestBuilder {
        private final Integer id;

        private VerifyDeletionRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for verifyDeletion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyDeletionCall(id, _callback);
        }


        /**
         * Execute verifyDeletion request
         * @return DeleteDocumentVerificationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public DeleteDocumentVerificationResponse execute() throws ApiException {
            ApiResponse<DeleteDocumentVerificationResponse> localVarResp = verifyDeletionWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyDeletion request with HTTP info returned
         * @return ApiResponse&lt;DeleteDocumentVerificationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteDocumentVerificationResponse> executeWithHttpInfo() throws ApiException {
            return verifyDeletionWithHttpInfo(id);
        }

        /**
         * Execute verifyDeletion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteDocumentVerificationResponse> _callback) throws ApiException {
            return verifyDeletionAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return VerifyDeletionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyDeletionRequestBuilder verifyDeletion(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new VerifyDeletionRequestBuilder(id);
    }
    private okhttp3.Call verifyStatusCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Document/DocumentVerification/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyStatusValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling verifyStatus(Async)");
        }

        return verifyStatusCall(id, _callback);

    }


    private ApiResponse<DocumentVerificationResponse> verifyStatusWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = verifyStatusValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DocumentVerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyStatusAsync(Integer id, final ApiCallback<DocumentVerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyStatusValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DocumentVerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyStatusRequestBuilder {
        private final Integer id;

        private VerifyStatusRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for verifyStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyStatusCall(id, _callback);
        }


        /**
         * Execute verifyStatus request
         * @return DocumentVerificationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public DocumentVerificationResponse execute() throws ApiException {
            ApiResponse<DocumentVerificationResponse> localVarResp = verifyStatusWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyStatus request with HTTP info returned
         * @return ApiResponse&lt;DocumentVerificationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentVerificationResponse> executeWithHttpInfo() throws ApiException {
            return verifyStatusWithHttpInfo(id);
        }

        /**
         * Execute verifyStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentVerificationResponse> _callback) throws ApiException {
            return verifyStatusAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return VerifyStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyStatusRequestBuilder verifyStatus(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new VerifyStatusRequestBuilder(id);
    }
    private okhttp3.Call verifyStatus_0Call(DocumentVerificationRequest documentVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentVerificationRequest;

        // create path and map variables
        String localVarPath = "/api/Document/VerifyDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyStatus_0ValidateBeforeCall(DocumentVerificationRequest documentVerificationRequest, final ApiCallback _callback) throws ApiException {
        return verifyStatus_0Call(documentVerificationRequest, _callback);

    }


    private ApiResponse<DocumentVerificationResponse> verifyStatus_0WithHttpInfo(DocumentVerificationRequest documentVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyStatus_0ValidateBeforeCall(documentVerificationRequest, null);
        Type localVarReturnType = new TypeToken<DocumentVerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyStatus_0Async(DocumentVerificationRequest documentVerificationRequest, final ApiCallback<DocumentVerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyStatus_0ValidateBeforeCall(documentVerificationRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentVerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyStatus0RequestBuilder {
        private String email;
        private String country;
        private String document;
        private String additionalDocument;
        private String face;
        private String documentType;
        private Long naturalPersonId;

        private VerifyStatus0RequestBuilder() {
        }

        /**
         * Set email
         * @param email  (optional)
         * @return VerifyStatus0RequestBuilder
         */
        public VerifyStatus0RequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return VerifyStatus0RequestBuilder
         */
        public VerifyStatus0RequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set document
         * @param document  (optional)
         * @return VerifyStatus0RequestBuilder
         */
        public VerifyStatus0RequestBuilder document(String document) {
            this.document = document;
            return this;
        }
        
        /**
         * Set additionalDocument
         * @param additionalDocument  (optional)
         * @return VerifyStatus0RequestBuilder
         */
        public VerifyStatus0RequestBuilder additionalDocument(String additionalDocument) {
            this.additionalDocument = additionalDocument;
            return this;
        }
        
        /**
         * Set face
         * @param face  (optional)
         * @return VerifyStatus0RequestBuilder
         */
        public VerifyStatus0RequestBuilder face(String face) {
            this.face = face;
            return this;
        }
        
        /**
         * Set documentType
         * @param documentType  (optional)
         * @return VerifyStatus0RequestBuilder
         */
        public VerifyStatus0RequestBuilder documentType(String documentType) {
            this.documentType = documentType;
            return this;
        }
        
        /**
         * Set naturalPersonId
         * @param naturalPersonId  (optional)
         * @return VerifyStatus0RequestBuilder
         */
        public VerifyStatus0RequestBuilder naturalPersonId(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
            return this;
        }
        
        /**
         * Build call for verifyStatus_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentVerificationRequest documentVerificationRequest = buildBodyParams();
            return verifyStatus_0Call(documentVerificationRequest, _callback);
        }

        private DocumentVerificationRequest buildBodyParams() {
            DocumentVerificationRequest documentVerificationRequest = new DocumentVerificationRequest();
            documentVerificationRequest.email(this.email);
            documentVerificationRequest.country(this.country);
            documentVerificationRequest.document(this.document);
            documentVerificationRequest.additionalDocument(this.additionalDocument);
            documentVerificationRequest.face(this.face);
            documentVerificationRequest.documentType(this.documentType);
            documentVerificationRequest.naturalPersonId(this.naturalPersonId);
            return documentVerificationRequest;
        }

        /**
         * Execute verifyStatus_0 request
         * @return DocumentVerificationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public DocumentVerificationResponse execute() throws ApiException {
            DocumentVerificationRequest documentVerificationRequest = buildBodyParams();
            ApiResponse<DocumentVerificationResponse> localVarResp = verifyStatus_0WithHttpInfo(documentVerificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyStatus_0 request with HTTP info returned
         * @return ApiResponse&lt;DocumentVerificationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentVerificationResponse> executeWithHttpInfo() throws ApiException {
            DocumentVerificationRequest documentVerificationRequest = buildBodyParams();
            return verifyStatus_0WithHttpInfo(documentVerificationRequest);
        }

        /**
         * Execute verifyStatus_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentVerificationResponse> _callback) throws ApiException {
            DocumentVerificationRequest documentVerificationRequest = buildBodyParams();
            return verifyStatus_0Async(documentVerificationRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return VerifyStatus0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyStatus0RequestBuilder verifyStatus_0() throws IllegalArgumentException {
        return new VerifyStatus0RequestBuilder();
    }
}

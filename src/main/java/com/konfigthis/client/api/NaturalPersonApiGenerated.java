/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddNaturalPersonInfoRequest;
import com.konfigthis.client.model.AddNaturalPersonRequest;
import com.konfigthis.client.model.AddNaturalPersonResponseBaseResponse;
import com.konfigthis.client.model.AmlReport;
import com.konfigthis.client.model.BaseResponse;
import com.konfigthis.client.model.DeleteAmlReport;
import com.konfigthis.client.model.EGender;
import com.konfigthis.client.model.EScore;
import java.io.File;
import com.konfigthis.client.model.NaturalPersonDocumentRequest;
import com.konfigthis.client.model.NaturalPersonDocumentsRequest;
import com.konfigthis.client.model.NaturalPersonIdDocumentRequest;
import com.konfigthis.client.model.NaturalPersonInfoResponseBaseResponse;
import com.konfigthis.client.model.NaturalPersonResponseBaseResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SumSubVerificationResponseBaseResponse;
import com.konfigthis.client.model.SumSubVerificationResponseListBaseResponse;
import com.konfigthis.client.model.UpdateNaturalPersonDocumentsResponseBaseResponse;
import com.konfigthis.client.model.UpdateNaturalPersonEconomicProfileRequest;
import com.konfigthis.client.model.UpdateNaturalPersonInfoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NaturalPersonApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NaturalPersonApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NaturalPersonApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getBearer() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setBearer(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOrUpdateCall(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addNaturalPersonRequest;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateValidateBeforeCall(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback _callback) throws ApiException {
        return createOrUpdateCall(addNaturalPersonRequest, _callback);

    }


    private ApiResponse<AddNaturalPersonResponseBaseResponse> createOrUpdateWithHttpInfo(AddNaturalPersonRequest addNaturalPersonRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(addNaturalPersonRequest, null);
        Type localVarReturnType = new TypeToken<AddNaturalPersonResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateAsync(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback<AddNaturalPersonResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(addNaturalPersonRequest, _callback);
        Type localVarReturnType = new TypeToken<AddNaturalPersonResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateRequestBuilder {
        private AddNaturalPersonInfoRequest info;
        private String clientReferenceId;
        private NaturalPersonDocumentsRequest documents;

        private CreateOrUpdateRequestBuilder() {
        }

        /**
         * Set info
         * @param info  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder info(AddNaturalPersonInfoRequest info) {
            this.info = info;
            return this;
        }
        
        /**
         * Set clientReferenceId
         * @param clientReferenceId  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = clientReferenceId;
            return this;
        }
        
        /**
         * Set documents
         * @param documents  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder documents(NaturalPersonDocumentsRequest documents) {
            this.documents = documents;
            return this;
        }
        
        /**
         * Build call for createOrUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return createOrUpdateCall(addNaturalPersonRequest, _callback);
        }

        private AddNaturalPersonRequest buildBodyParams() {
            AddNaturalPersonRequest addNaturalPersonRequest = new AddNaturalPersonRequest();
            addNaturalPersonRequest.info(this.info);
            addNaturalPersonRequest.clientReferenceId(this.clientReferenceId);
            addNaturalPersonRequest.documents(this.documents);
            return addNaturalPersonRequest;
        }

        /**
         * Execute createOrUpdate request
         * @return AddNaturalPersonResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AddNaturalPersonResponseBaseResponse execute() throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            ApiResponse<AddNaturalPersonResponseBaseResponse> localVarResp = createOrUpdateWithHttpInfo(addNaturalPersonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdate request with HTTP info returned
         * @return ApiResponse&lt;AddNaturalPersonResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddNaturalPersonResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return createOrUpdateWithHttpInfo(addNaturalPersonRequest);
        }

        /**
         * Execute createOrUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddNaturalPersonResponseBaseResponse> _callback) throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return createOrUpdateAsync(addNaturalPersonRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateOrUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateRequestBuilder createOrUpdate() throws IllegalArgumentException {
        return new CreateOrUpdateRequestBuilder();
    }
    private okhttp3.Call deleteByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteById(Async)");
        }

        return deleteByIdCall(id, _callback);

    }


    private ApiResponse<DeleteAmlReport> deleteByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteAmlReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(Long id, final ApiCallback<DeleteAmlReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteAmlReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final Long id;

        private DeleteByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(id, _callback);
        }


        /**
         * Execute deleteById request
         * @return DeleteAmlReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public DeleteAmlReport execute() throws ApiException {
            ApiResponse<DeleteAmlReport> localVarResp = deleteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;DeleteAmlReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteAmlReport> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteAmlReport> _callback) throws ApiException {
            return deleteByIdAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<AmlReport> getByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Long id, final ApiCallback<AmlReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Long id;

        private GetByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return AmlReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AmlReport execute() throws ApiException {
            ApiResponse<AmlReport> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;AmlReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmlReport> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmlReport> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getById_0Call(String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{reference}"
            .replace("{" + "reference" + "}", localVarApiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById_0ValidateBeforeCall(String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling getById_0(Async)");
        }

        return getById_0Call(reference, _callback);

    }


    private ApiResponse<AmlReport> getById_0WithHttpInfo(String reference) throws ApiException {
        okhttp3.Call localVarCall = getById_0ValidateBeforeCall(reference, null);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getById_0Async(String reference, final ApiCallback<AmlReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById_0ValidateBeforeCall(reference, _callback);
        Type localVarReturnType = new TypeToken<AmlReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetById0RequestBuilder {
        private final String reference;

        private GetById0RequestBuilder(String reference) {
            this.reference = reference;
        }

        /**
         * Build call for getById_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getById_0Call(reference, _callback);
        }


        /**
         * Execute getById_0 request
         * @return AmlReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AmlReport execute() throws ApiException {
            ApiResponse<AmlReport> localVarResp = getById_0WithHttpInfo(reference);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById_0 request with HTTP info returned
         * @return ApiResponse&lt;AmlReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AmlReport> executeWithHttpInfo() throws ApiException {
            return getById_0WithHttpInfo(reference);
        }

        /**
         * Execute getById_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AmlReport> _callback) throws ApiException {
            return getById_0Async(reference, _callback);
        }
    }

    /**
     * 
     * 
     * @param reference  (required)
     * @return GetById0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetById0RequestBuilder getById_0(String reference) throws IllegalArgumentException {
        if (reference == null) throw new IllegalArgumentException("\"reference\" is required but got null");
            

        return new GetById0RequestBuilder(reference);
    }
    private okhttp3.Call getCertificateCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/certificate"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificateValidateBeforeCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling getCertificate(Async)");
        }

        return getCertificateCall(naturalPersonId, _callback);

    }


    private ApiResponse<File> getCertificateWithHttpInfo(Long naturalPersonId) throws ApiException {
        okhttp3.Call localVarCall = getCertificateValidateBeforeCall(naturalPersonId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCertificateAsync(Long naturalPersonId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificateValidateBeforeCall(naturalPersonId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCertificateRequestBuilder {
        private final Long naturalPersonId;

        private GetCertificateRequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Build call for getCertificate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCertificateCall(naturalPersonId, _callback);
        }


        /**
         * Execute getCertificate request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getCertificateWithHttpInfo(naturalPersonId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCertificate request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getCertificateWithHttpInfo(naturalPersonId);
        }

        /**
         * Execute getCertificate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getCertificateAsync(naturalPersonId, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return GetCertificateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCertificateRequestBuilder getCertificate(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new GetCertificateRequestBuilder(naturalPersonId);
    }
    private okhttp3.Call getDetailsCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/get"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling getDetails(Async)");
        }

        return getDetailsCall(naturalPersonId, _callback);

    }


    private ApiResponse<NaturalPersonResponseBaseResponse> getDetailsWithHttpInfo(Long naturalPersonId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(naturalPersonId, null);
        Type localVarReturnType = new TypeToken<NaturalPersonResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(Long naturalPersonId, final ApiCallback<NaturalPersonResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(naturalPersonId, _callback);
        Type localVarReturnType = new TypeToken<NaturalPersonResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final Long naturalPersonId;

        private GetDetailsRequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(naturalPersonId, _callback);
        }


        /**
         * Execute getDetails request
         * @return NaturalPersonResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NaturalPersonResponseBaseResponse execute() throws ApiException {
            ApiResponse<NaturalPersonResponseBaseResponse> localVarResp = getDetailsWithHttpInfo(naturalPersonId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;NaturalPersonResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NaturalPersonResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(naturalPersonId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NaturalPersonResponseBaseResponse> _callback) throws ApiException {
            return getDetailsAsync(naturalPersonId, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new GetDetailsRequestBuilder(naturalPersonId);
    }
    private okhttp3.Call getVerificationRecordCall(Long verificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/verificationRecord/{verificationId}"
            .replace("{" + "verificationId" + "}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVerificationRecordValidateBeforeCall(Long verificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling getVerificationRecord(Async)");
        }

        return getVerificationRecordCall(verificationId, _callback);

    }


    private ApiResponse<NaturalPersonInfoResponseBaseResponse> getVerificationRecordWithHttpInfo(Long verificationId) throws ApiException {
        okhttp3.Call localVarCall = getVerificationRecordValidateBeforeCall(verificationId, null);
        Type localVarReturnType = new TypeToken<NaturalPersonInfoResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVerificationRecordAsync(Long verificationId, final ApiCallback<NaturalPersonInfoResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVerificationRecordValidateBeforeCall(verificationId, _callback);
        Type localVarReturnType = new TypeToken<NaturalPersonInfoResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVerificationRecordRequestBuilder {
        private final Long verificationId;

        private GetVerificationRecordRequestBuilder(Long verificationId) {
            this.verificationId = verificationId;
        }

        /**
         * Build call for getVerificationRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVerificationRecordCall(verificationId, _callback);
        }


        /**
         * Execute getVerificationRecord request
         * @return NaturalPersonInfoResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NaturalPersonInfoResponseBaseResponse execute() throws ApiException {
            ApiResponse<NaturalPersonInfoResponseBaseResponse> localVarResp = getVerificationRecordWithHttpInfo(verificationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVerificationRecord request with HTTP info returned
         * @return ApiResponse&lt;NaturalPersonInfoResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NaturalPersonInfoResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            return getVerificationRecordWithHttpInfo(verificationId);
        }

        /**
         * Execute getVerificationRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NaturalPersonInfoResponseBaseResponse> _callback) throws ApiException {
            return getVerificationRecordAsync(verificationId, _callback);
        }
    }

    /**
     * 
     * 
     * @param verificationId  (required)
     * @return GetVerificationRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetVerificationRecordRequestBuilder getVerificationRecord(Long verificationId) throws IllegalArgumentException {
        if (verificationId == null) throw new IllegalArgumentException("\"verificationId\" is required but got null");
        return new GetVerificationRecordRequestBuilder(verificationId);
    }
    private okhttp3.Call getVerificationsCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/verifications"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVerificationsValidateBeforeCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling getVerifications(Async)");
        }

        return getVerificationsCall(naturalPersonId, _callback);

    }


    private ApiResponse<SumSubVerificationResponseListBaseResponse> getVerificationsWithHttpInfo(Long naturalPersonId) throws ApiException {
        okhttp3.Call localVarCall = getVerificationsValidateBeforeCall(naturalPersonId, null);
        Type localVarReturnType = new TypeToken<SumSubVerificationResponseListBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVerificationsAsync(Long naturalPersonId, final ApiCallback<SumSubVerificationResponseListBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVerificationsValidateBeforeCall(naturalPersonId, _callback);
        Type localVarReturnType = new TypeToken<SumSubVerificationResponseListBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVerificationsRequestBuilder {
        private final Long naturalPersonId;

        private GetVerificationsRequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Build call for getVerifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVerificationsCall(naturalPersonId, _callback);
        }


        /**
         * Execute getVerifications request
         * @return SumSubVerificationResponseListBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SumSubVerificationResponseListBaseResponse execute() throws ApiException {
            ApiResponse<SumSubVerificationResponseListBaseResponse> localVarResp = getVerificationsWithHttpInfo(naturalPersonId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVerifications request with HTTP info returned
         * @return ApiResponse&lt;SumSubVerificationResponseListBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SumSubVerificationResponseListBaseResponse> executeWithHttpInfo() throws ApiException {
            return getVerificationsWithHttpInfo(naturalPersonId);
        }

        /**
         * Execute getVerifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SumSubVerificationResponseListBaseResponse> _callback) throws ApiException {
            return getVerificationsAsync(naturalPersonId, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return GetVerificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetVerificationsRequestBuilder getVerifications(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new GetVerificationsRequestBuilder(naturalPersonId);
    }
    private okhttp3.Call removeByIdCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/delete"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling removeById(Async)");
        }

        return removeByIdCall(naturalPersonId, _callback);

    }


    private ApiResponse<BaseResponse> removeByIdWithHttpInfo(Long naturalPersonId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(naturalPersonId, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(Long naturalPersonId, final ApiCallback<BaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(naturalPersonId, _callback);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final Long naturalPersonId;

        private RemoveByIdRequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(naturalPersonId, _callback);
        }


        /**
         * Execute removeById request
         * @return BaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public BaseResponse execute() throws ApiException {
            ApiResponse<BaseResponse> localVarResp = removeByIdWithHttpInfo(naturalPersonId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;BaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BaseResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(naturalPersonId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BaseResponse> _callback) throws ApiException {
            return removeByIdAsync(naturalPersonId, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new RemoveByIdRequestBuilder(naturalPersonId);
    }
    private okhttp3.Call updateDocumentsCall(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = naturalPersonDocumentsRequest;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/updateDocuments"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentsValidateBeforeCall(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling updateDocuments(Async)");
        }

        return updateDocumentsCall(naturalPersonId, naturalPersonDocumentsRequest, _callback);

    }


    private ApiResponse<UpdateNaturalPersonDocumentsResponseBaseResponse> updateDocumentsWithHttpInfo(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentsValidateBeforeCall(naturalPersonId, naturalPersonDocumentsRequest, null);
        Type localVarReturnType = new TypeToken<UpdateNaturalPersonDocumentsResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDocumentsAsync(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest, final ApiCallback<UpdateNaturalPersonDocumentsResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentsValidateBeforeCall(naturalPersonId, naturalPersonDocumentsRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateNaturalPersonDocumentsResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDocumentsRequestBuilder {
        private final Long naturalPersonId;
        private NaturalPersonIdDocumentRequest idDocument;
        private NaturalPersonDocumentRequest addressDocument;

        private UpdateDocumentsRequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Set idDocument
         * @param idDocument  (optional)
         * @return UpdateDocumentsRequestBuilder
         */
        public UpdateDocumentsRequestBuilder idDocument(NaturalPersonIdDocumentRequest idDocument) {
            this.idDocument = idDocument;
            return this;
        }
        
        /**
         * Set addressDocument
         * @param addressDocument  (optional)
         * @return UpdateDocumentsRequestBuilder
         */
        public UpdateDocumentsRequestBuilder addressDocument(NaturalPersonDocumentRequest addressDocument) {
            this.addressDocument = addressDocument;
            return this;
        }
        
        /**
         * Build call for updateDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            return updateDocumentsCall(naturalPersonId, naturalPersonDocumentsRequest, _callback);
        }

        private NaturalPersonDocumentsRequest buildBodyParams() {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = new NaturalPersonDocumentsRequest();
            naturalPersonDocumentsRequest.idDocument(this.idDocument);
            naturalPersonDocumentsRequest.addressDocument(this.addressDocument);
            return naturalPersonDocumentsRequest;
        }

        /**
         * Execute updateDocuments request
         * @return UpdateNaturalPersonDocumentsResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UpdateNaturalPersonDocumentsResponseBaseResponse execute() throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            ApiResponse<UpdateNaturalPersonDocumentsResponseBaseResponse> localVarResp = updateDocumentsWithHttpInfo(naturalPersonId, naturalPersonDocumentsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDocuments request with HTTP info returned
         * @return ApiResponse&lt;UpdateNaturalPersonDocumentsResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateNaturalPersonDocumentsResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            return updateDocumentsWithHttpInfo(naturalPersonId, naturalPersonDocumentsRequest);
        }

        /**
         * Execute updateDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateNaturalPersonDocumentsResponseBaseResponse> _callback) throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            return updateDocumentsAsync(naturalPersonId, naturalPersonDocumentsRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return UpdateDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDocumentsRequestBuilder updateDocuments(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new UpdateDocumentsRequestBuilder(naturalPersonId);
    }
    private okhttp3.Call updateInformationCall(Long naturalPersonId, UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNaturalPersonInfoRequest;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/updateInfo"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInformationValidateBeforeCall(Long naturalPersonId, UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling updateInformation(Async)");
        }

        return updateInformationCall(naturalPersonId, updateNaturalPersonInfoRequest, _callback);

    }


    private ApiResponse<NaturalPersonInfoResponseBaseResponse> updateInformationWithHttpInfo(Long naturalPersonId, UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInformationValidateBeforeCall(naturalPersonId, updateNaturalPersonInfoRequest, null);
        Type localVarReturnType = new TypeToken<NaturalPersonInfoResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInformationAsync(Long naturalPersonId, UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest, final ApiCallback<NaturalPersonInfoResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInformationValidateBeforeCall(naturalPersonId, updateNaturalPersonInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<NaturalPersonInfoResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInformationRequestBuilder {
        private final Long naturalPersonId;
        private String clientReferenceId;
        private String taxId;
        private String firstName;
        private String lastName;
        private String middleName;
        private String legalName;
        private OffsetDateTime dateOfBirth;
        private EGender gender;
        private String countryBirth;
        private String countryResidence;
        private String countryMainBusiness;
        private String nationality;
        private String email;
        private String emailTwo;
        private String mobilePhone;
        private String mobilePhoneTwo;
        private Boolean automaticallyUpdateNPRisk;
        private EScore riskLevel;
        private String riskLevelJustification;
        private Boolean isFlagged;
        private String comments;
        private UpdateNaturalPersonEconomicProfileRequest economicProfile;

        private UpdateInformationRequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Set clientReferenceId
         * @param clientReferenceId  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = clientReferenceId;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set legalName
         * @param legalName  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder legalName(String legalName) {
            this.legalName = legalName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder dateOfBirth(OffsetDateTime dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder gender(EGender gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set countryBirth
         * @param countryBirth  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder countryBirth(String countryBirth) {
            this.countryBirth = countryBirth;
            return this;
        }
        
        /**
         * Set countryResidence
         * @param countryResidence  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder countryResidence(String countryResidence) {
            this.countryResidence = countryResidence;
            return this;
        }
        
        /**
         * Set countryMainBusiness
         * @param countryMainBusiness  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder countryMainBusiness(String countryMainBusiness) {
            this.countryMainBusiness = countryMainBusiness;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set emailTwo
         * @param emailTwo  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder emailTwo(String emailTwo) {
            this.emailTwo = emailTwo;
            return this;
        }
        
        /**
         * Set mobilePhone
         * @param mobilePhone  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder mobilePhone(String mobilePhone) {
            this.mobilePhone = mobilePhone;
            return this;
        }
        
        /**
         * Set mobilePhoneTwo
         * @param mobilePhoneTwo  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder mobilePhoneTwo(String mobilePhoneTwo) {
            this.mobilePhoneTwo = mobilePhoneTwo;
            return this;
        }
        
        /**
         * Set automaticallyUpdateNPRisk
         * @param automaticallyUpdateNPRisk  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder automaticallyUpdateNPRisk(Boolean automaticallyUpdateNPRisk) {
            this.automaticallyUpdateNPRisk = automaticallyUpdateNPRisk;
            return this;
        }
        
        /**
         * Set riskLevel
         * @param riskLevel  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder riskLevel(EScore riskLevel) {
            this.riskLevel = riskLevel;
            return this;
        }
        
        /**
         * Set riskLevelJustification
         * @param riskLevelJustification  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder riskLevelJustification(String riskLevelJustification) {
            this.riskLevelJustification = riskLevelJustification;
            return this;
        }
        
        /**
         * Set isFlagged
         * @param isFlagged  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder isFlagged(Boolean isFlagged) {
            this.isFlagged = isFlagged;
            return this;
        }
        
        /**
         * Set comments
         * @param comments  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set economicProfile
         * @param economicProfile  (optional)
         * @return UpdateInformationRequestBuilder
         */
        public UpdateInformationRequestBuilder economicProfile(UpdateNaturalPersonEconomicProfileRequest economicProfile) {
            this.economicProfile = economicProfile;
            return this;
        }
        
        /**
         * Build call for updateInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest = buildBodyParams();
            return updateInformationCall(naturalPersonId, updateNaturalPersonInfoRequest, _callback);
        }

        private UpdateNaturalPersonInfoRequest buildBodyParams() {
            UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest = new UpdateNaturalPersonInfoRequest();
            updateNaturalPersonInfoRequest.clientReferenceId(this.clientReferenceId);
            updateNaturalPersonInfoRequest.taxId(this.taxId);
            updateNaturalPersonInfoRequest.firstName(this.firstName);
            updateNaturalPersonInfoRequest.lastName(this.lastName);
            updateNaturalPersonInfoRequest.middleName(this.middleName);
            updateNaturalPersonInfoRequest.legalName(this.legalName);
            updateNaturalPersonInfoRequest.dateOfBirth(this.dateOfBirth);
            updateNaturalPersonInfoRequest.gender(this.gender);
            updateNaturalPersonInfoRequest.countryBirth(this.countryBirth);
            updateNaturalPersonInfoRequest.countryResidence(this.countryResidence);
            updateNaturalPersonInfoRequest.countryMainBusiness(this.countryMainBusiness);
            updateNaturalPersonInfoRequest.nationality(this.nationality);
            updateNaturalPersonInfoRequest.email(this.email);
            updateNaturalPersonInfoRequest.emailTwo(this.emailTwo);
            updateNaturalPersonInfoRequest.mobilePhone(this.mobilePhone);
            updateNaturalPersonInfoRequest.mobilePhoneTwo(this.mobilePhoneTwo);
            updateNaturalPersonInfoRequest.automaticallyUpdateNPRisk(this.automaticallyUpdateNPRisk);
            updateNaturalPersonInfoRequest.riskLevel(this.riskLevel);
            updateNaturalPersonInfoRequest.riskLevelJustification(this.riskLevelJustification);
            updateNaturalPersonInfoRequest.isFlagged(this.isFlagged);
            updateNaturalPersonInfoRequest.comments(this.comments);
            updateNaturalPersonInfoRequest.economicProfile(this.economicProfile);
            return updateNaturalPersonInfoRequest;
        }

        /**
         * Execute updateInformation request
         * @return NaturalPersonInfoResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NaturalPersonInfoResponseBaseResponse execute() throws ApiException {
            UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest = buildBodyParams();
            ApiResponse<NaturalPersonInfoResponseBaseResponse> localVarResp = updateInformationWithHttpInfo(naturalPersonId, updateNaturalPersonInfoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInformation request with HTTP info returned
         * @return ApiResponse&lt;NaturalPersonInfoResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NaturalPersonInfoResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest = buildBodyParams();
            return updateInformationWithHttpInfo(naturalPersonId, updateNaturalPersonInfoRequest);
        }

        /**
         * Execute updateInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NaturalPersonInfoResponseBaseResponse> _callback) throws ApiException {
            UpdateNaturalPersonInfoRequest updateNaturalPersonInfoRequest = buildBodyParams();
            return updateInformationAsync(naturalPersonId, updateNaturalPersonInfoRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return UpdateInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInformationRequestBuilder updateInformation(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new UpdateInformationRequestBuilder(naturalPersonId);
    }
    private okhttp3.Call verifyDetailsCall(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addNaturalPersonRequest;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDetailsValidateBeforeCall(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback _callback) throws ApiException {
        return verifyDetailsCall(addNaturalPersonRequest, _callback);

    }


    private ApiResponse<AddNaturalPersonResponseBaseResponse> verifyDetailsWithHttpInfo(AddNaturalPersonRequest addNaturalPersonRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyDetailsValidateBeforeCall(addNaturalPersonRequest, null);
        Type localVarReturnType = new TypeToken<AddNaturalPersonResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyDetailsAsync(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback<AddNaturalPersonResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDetailsValidateBeforeCall(addNaturalPersonRequest, _callback);
        Type localVarReturnType = new TypeToken<AddNaturalPersonResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyDetailsRequestBuilder {
        private AddNaturalPersonInfoRequest info;
        private String clientReferenceId;
        private NaturalPersonDocumentsRequest documents;

        private VerifyDetailsRequestBuilder() {
        }

        /**
         * Set info
         * @param info  (optional)
         * @return VerifyDetailsRequestBuilder
         */
        public VerifyDetailsRequestBuilder info(AddNaturalPersonInfoRequest info) {
            this.info = info;
            return this;
        }
        
        /**
         * Set clientReferenceId
         * @param clientReferenceId  (optional)
         * @return VerifyDetailsRequestBuilder
         */
        public VerifyDetailsRequestBuilder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = clientReferenceId;
            return this;
        }
        
        /**
         * Set documents
         * @param documents  (optional)
         * @return VerifyDetailsRequestBuilder
         */
        public VerifyDetailsRequestBuilder documents(NaturalPersonDocumentsRequest documents) {
            this.documents = documents;
            return this;
        }
        
        /**
         * Build call for verifyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return verifyDetailsCall(addNaturalPersonRequest, _callback);
        }

        private AddNaturalPersonRequest buildBodyParams() {
            AddNaturalPersonRequest addNaturalPersonRequest = new AddNaturalPersonRequest();
            addNaturalPersonRequest.info(this.info);
            addNaturalPersonRequest.clientReferenceId(this.clientReferenceId);
            addNaturalPersonRequest.documents(this.documents);
            return addNaturalPersonRequest;
        }

        /**
         * Execute verifyDetails request
         * @return AddNaturalPersonResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AddNaturalPersonResponseBaseResponse execute() throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            ApiResponse<AddNaturalPersonResponseBaseResponse> localVarResp = verifyDetailsWithHttpInfo(addNaturalPersonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyDetails request with HTTP info returned
         * @return ApiResponse&lt;AddNaturalPersonResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddNaturalPersonResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return verifyDetailsWithHttpInfo(addNaturalPersonRequest);
        }

        /**
         * Execute verifyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddNaturalPersonResponseBaseResponse> _callback) throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return verifyDetailsAsync(addNaturalPersonRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return VerifyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyDetailsRequestBuilder verifyDetails() throws IllegalArgumentException {
        return new VerifyDetailsRequestBuilder();
    }
    private okhttp3.Call verifyDetails_0Call(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/verify"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDetails_0ValidateBeforeCall(Long naturalPersonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling verifyDetails_0(Async)");
        }

        return verifyDetails_0Call(naturalPersonId, _callback);

    }


    private ApiResponse<SumSubVerificationResponseBaseResponse> verifyDetails_0WithHttpInfo(Long naturalPersonId) throws ApiException {
        okhttp3.Call localVarCall = verifyDetails_0ValidateBeforeCall(naturalPersonId, null);
        Type localVarReturnType = new TypeToken<SumSubVerificationResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyDetails_0Async(Long naturalPersonId, final ApiCallback<SumSubVerificationResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDetails_0ValidateBeforeCall(naturalPersonId, _callback);
        Type localVarReturnType = new TypeToken<SumSubVerificationResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyDetails0RequestBuilder {
        private final Long naturalPersonId;

        private VerifyDetails0RequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Build call for verifyDetails_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyDetails_0Call(naturalPersonId, _callback);
        }


        /**
         * Execute verifyDetails_0 request
         * @return SumSubVerificationResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SumSubVerificationResponseBaseResponse execute() throws ApiException {
            ApiResponse<SumSubVerificationResponseBaseResponse> localVarResp = verifyDetails_0WithHttpInfo(naturalPersonId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyDetails_0 request with HTTP info returned
         * @return ApiResponse&lt;SumSubVerificationResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SumSubVerificationResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            return verifyDetails_0WithHttpInfo(naturalPersonId);
        }

        /**
         * Execute verifyDetails_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SumSubVerificationResponseBaseResponse> _callback) throws ApiException {
            return verifyDetails_0Async(naturalPersonId, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return VerifyDetails0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyDetails0RequestBuilder verifyDetails_0(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new VerifyDetails0RequestBuilder(naturalPersonId);
    }
    private okhttp3.Call verifyDocumentsCall(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = naturalPersonDocumentsRequest;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/{naturalPersonId}/updateDocuments/verify"
            .replace("{" + "naturalPersonId" + "}", localVarApiClient.escapeString(naturalPersonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDocumentsValidateBeforeCall(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'naturalPersonId' is set
        if (naturalPersonId == null) {
            throw new ApiException("Missing the required parameter 'naturalPersonId' when calling verifyDocuments(Async)");
        }

        return verifyDocumentsCall(naturalPersonId, naturalPersonDocumentsRequest, _callback);

    }


    private ApiResponse<UpdateNaturalPersonDocumentsResponseBaseResponse> verifyDocumentsWithHttpInfo(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyDocumentsValidateBeforeCall(naturalPersonId, naturalPersonDocumentsRequest, null);
        Type localVarReturnType = new TypeToken<UpdateNaturalPersonDocumentsResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyDocumentsAsync(Long naturalPersonId, NaturalPersonDocumentsRequest naturalPersonDocumentsRequest, final ApiCallback<UpdateNaturalPersonDocumentsResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDocumentsValidateBeforeCall(naturalPersonId, naturalPersonDocumentsRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateNaturalPersonDocumentsResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyDocumentsRequestBuilder {
        private final Long naturalPersonId;
        private NaturalPersonIdDocumentRequest idDocument;
        private NaturalPersonDocumentRequest addressDocument;

        private VerifyDocumentsRequestBuilder(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
        }

        /**
         * Set idDocument
         * @param idDocument  (optional)
         * @return VerifyDocumentsRequestBuilder
         */
        public VerifyDocumentsRequestBuilder idDocument(NaturalPersonIdDocumentRequest idDocument) {
            this.idDocument = idDocument;
            return this;
        }
        
        /**
         * Set addressDocument
         * @param addressDocument  (optional)
         * @return VerifyDocumentsRequestBuilder
         */
        public VerifyDocumentsRequestBuilder addressDocument(NaturalPersonDocumentRequest addressDocument) {
            this.addressDocument = addressDocument;
            return this;
        }
        
        /**
         * Build call for verifyDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            return verifyDocumentsCall(naturalPersonId, naturalPersonDocumentsRequest, _callback);
        }

        private NaturalPersonDocumentsRequest buildBodyParams() {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = new NaturalPersonDocumentsRequest();
            naturalPersonDocumentsRequest.idDocument(this.idDocument);
            naturalPersonDocumentsRequest.addressDocument(this.addressDocument);
            return naturalPersonDocumentsRequest;
        }

        /**
         * Execute verifyDocuments request
         * @return UpdateNaturalPersonDocumentsResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UpdateNaturalPersonDocumentsResponseBaseResponse execute() throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            ApiResponse<UpdateNaturalPersonDocumentsResponseBaseResponse> localVarResp = verifyDocumentsWithHttpInfo(naturalPersonId, naturalPersonDocumentsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyDocuments request with HTTP info returned
         * @return ApiResponse&lt;UpdateNaturalPersonDocumentsResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateNaturalPersonDocumentsResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            return verifyDocumentsWithHttpInfo(naturalPersonId, naturalPersonDocumentsRequest);
        }

        /**
         * Execute verifyDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateNaturalPersonDocumentsResponseBaseResponse> _callback) throws ApiException {
            NaturalPersonDocumentsRequest naturalPersonDocumentsRequest = buildBodyParams();
            return verifyDocumentsAsync(naturalPersonId, naturalPersonDocumentsRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @param naturalPersonId  (required)
     * @return VerifyDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyDocumentsRequestBuilder verifyDocuments(Long naturalPersonId) throws IllegalArgumentException {
        if (naturalPersonId == null) throw new IllegalArgumentException("\"naturalPersonId\" is required but got null");
        return new VerifyDocumentsRequestBuilder(naturalPersonId);
    }
    private okhttp3.Call verifyEntityCall(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addNaturalPersonRequest;

        // create path and map variables
        String localVarPath = "/api/NaturalPerson/verifyentity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEntityValidateBeforeCall(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback _callback) throws ApiException {
        return verifyEntityCall(addNaturalPersonRequest, _callback);

    }


    private ApiResponse<AddNaturalPersonResponseBaseResponse> verifyEntityWithHttpInfo(AddNaturalPersonRequest addNaturalPersonRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyEntityValidateBeforeCall(addNaturalPersonRequest, null);
        Type localVarReturnType = new TypeToken<AddNaturalPersonResponseBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyEntityAsync(AddNaturalPersonRequest addNaturalPersonRequest, final ApiCallback<AddNaturalPersonResponseBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEntityValidateBeforeCall(addNaturalPersonRequest, _callback);
        Type localVarReturnType = new TypeToken<AddNaturalPersonResponseBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyEntityRequestBuilder {
        private AddNaturalPersonInfoRequest info;
        private String clientReferenceId;
        private NaturalPersonDocumentsRequest documents;

        private VerifyEntityRequestBuilder() {
        }

        /**
         * Set info
         * @param info  (optional)
         * @return VerifyEntityRequestBuilder
         */
        public VerifyEntityRequestBuilder info(AddNaturalPersonInfoRequest info) {
            this.info = info;
            return this;
        }
        
        /**
         * Set clientReferenceId
         * @param clientReferenceId  (optional)
         * @return VerifyEntityRequestBuilder
         */
        public VerifyEntityRequestBuilder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = clientReferenceId;
            return this;
        }
        
        /**
         * Set documents
         * @param documents  (optional)
         * @return VerifyEntityRequestBuilder
         */
        public VerifyEntityRequestBuilder documents(NaturalPersonDocumentsRequest documents) {
            this.documents = documents;
            return this;
        }
        
        /**
         * Build call for verifyEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return verifyEntityCall(addNaturalPersonRequest, _callback);
        }

        private AddNaturalPersonRequest buildBodyParams() {
            AddNaturalPersonRequest addNaturalPersonRequest = new AddNaturalPersonRequest();
            addNaturalPersonRequest.info(this.info);
            addNaturalPersonRequest.clientReferenceId(this.clientReferenceId);
            addNaturalPersonRequest.documents(this.documents);
            return addNaturalPersonRequest;
        }

        /**
         * Execute verifyEntity request
         * @return AddNaturalPersonResponseBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AddNaturalPersonResponseBaseResponse execute() throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            ApiResponse<AddNaturalPersonResponseBaseResponse> localVarResp = verifyEntityWithHttpInfo(addNaturalPersonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyEntity request with HTTP info returned
         * @return ApiResponse&lt;AddNaturalPersonResponseBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddNaturalPersonResponseBaseResponse> executeWithHttpInfo() throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return verifyEntityWithHttpInfo(addNaturalPersonRequest);
        }

        /**
         * Execute verifyEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddNaturalPersonResponseBaseResponse> _callback) throws ApiException {
            AddNaturalPersonRequest addNaturalPersonRequest = buildBodyParams();
            return verifyEntityAsync(addNaturalPersonRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return VerifyEntityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyEntityRequestBuilder verifyEntity() throws IllegalArgumentException {
        return new VerifyEntityRequestBuilder();
    }
}

/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressRequest;
import com.konfigthis.client.model.AddressVerificationDeleteResult;
import com.konfigthis.client.model.AddressVerificationResult;
import java.io.File;
import com.konfigthis.client.model.GpsLocation;
import com.konfigthis.client.model.InfoGps;
import com.konfigthis.client.model.NaturalPersonELVRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AddressApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AddressApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getBearer() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setBearer(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNaturalPersonElvCall(NaturalPersonELVRequest naturalPersonELVRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = naturalPersonELVRequest;

        // create path and map variables
        String localVarPath = "/api/Address/NaturalPersonELV";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNaturalPersonElvValidateBeforeCall(NaturalPersonELVRequest naturalPersonELVRequest, final ApiCallback _callback) throws ApiException {
        return createNaturalPersonElvCall(naturalPersonELVRequest, _callback);

    }


    private ApiResponse<AddressVerificationResult> createNaturalPersonElvWithHttpInfo(NaturalPersonELVRequest naturalPersonELVRequest) throws ApiException {
        okhttp3.Call localVarCall = createNaturalPersonElvValidateBeforeCall(naturalPersonELVRequest, null);
        Type localVarReturnType = new TypeToken<AddressVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNaturalPersonElvAsync(NaturalPersonELVRequest naturalPersonELVRequest, final ApiCallback<AddressVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNaturalPersonElvValidateBeforeCall(naturalPersonELVRequest, _callback);
        Type localVarReturnType = new TypeToken<AddressVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNaturalPersonElvRequestBuilder {
        private Long naturalPersonIndexId;
        private String street;
        private String streetNumber;
        private String unit;
        private String zipCode;
        private String city;
        private String district;
        private String region;
        private String country;
        private String email;
        private String mobile;
        private String fullAddress;

        private CreateNaturalPersonElvRequestBuilder() {
        }

        /**
         * Set naturalPersonIndexId
         * @param naturalPersonIndexId  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder naturalPersonIndexId(Long naturalPersonIndexId) {
            this.naturalPersonIndexId = naturalPersonIndexId;
            return this;
        }
        
        /**
         * Set street
         * @param street  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder street(String street) {
            this.street = street;
            return this;
        }
        
        /**
         * Set streetNumber
         * @param streetNumber  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder streetNumber(String streetNumber) {
            this.streetNumber = streetNumber;
            return this;
        }
        
        /**
         * Set unit
         * @param unit  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder unit(String unit) {
            this.unit = unit;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set district
         * @param district  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder district(String district) {
            this.district = district;
            return this;
        }
        
        /**
         * Set region
         * @param region  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder region(String region) {
            this.region = region;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set mobile
         * @param mobile  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder mobile(String mobile) {
            this.mobile = mobile;
            return this;
        }
        
        /**
         * Set fullAddress
         * @param fullAddress  (optional)
         * @return CreateNaturalPersonElvRequestBuilder
         */
        public CreateNaturalPersonElvRequestBuilder fullAddress(String fullAddress) {
            this.fullAddress = fullAddress;
            return this;
        }
        
        /**
         * Build call for createNaturalPersonElv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NaturalPersonELVRequest naturalPersonELVRequest = buildBodyParams();
            return createNaturalPersonElvCall(naturalPersonELVRequest, _callback);
        }

        private NaturalPersonELVRequest buildBodyParams() {
            NaturalPersonELVRequest naturalPersonELVRequest = new NaturalPersonELVRequest();
            naturalPersonELVRequest.naturalPersonIndexId(this.naturalPersonIndexId);
            naturalPersonELVRequest.street(this.street);
            naturalPersonELVRequest.streetNumber(this.streetNumber);
            naturalPersonELVRequest.unit(this.unit);
            naturalPersonELVRequest.zipCode(this.zipCode);
            naturalPersonELVRequest.city(this.city);
            naturalPersonELVRequest.district(this.district);
            naturalPersonELVRequest.region(this.region);
            naturalPersonELVRequest.country(this.country);
            naturalPersonELVRequest.email(this.email);
            naturalPersonELVRequest.mobile(this.mobile);
            naturalPersonELVRequest.fullAddress(this.fullAddress);
            return naturalPersonELVRequest;
        }

        /**
         * Execute createNaturalPersonElv request
         * @return AddressVerificationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AddressVerificationResult execute() throws ApiException {
            NaturalPersonELVRequest naturalPersonELVRequest = buildBodyParams();
            ApiResponse<AddressVerificationResult> localVarResp = createNaturalPersonElvWithHttpInfo(naturalPersonELVRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNaturalPersonElv request with HTTP info returned
         * @return ApiResponse&lt;AddressVerificationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddressVerificationResult> executeWithHttpInfo() throws ApiException {
            NaturalPersonELVRequest naturalPersonELVRequest = buildBodyParams();
            return createNaturalPersonElvWithHttpInfo(naturalPersonELVRequest);
        }

        /**
         * Execute createNaturalPersonElv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddressVerificationResult> _callback) throws ApiException {
            NaturalPersonELVRequest naturalPersonELVRequest = buildBodyParams();
            return createNaturalPersonElvAsync(naturalPersonELVRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateNaturalPersonElvRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNaturalPersonElvRequestBuilder createNaturalPersonElv() throws IllegalArgumentException {
        return new CreateNaturalPersonElvRequestBuilder();
    }
    private okhttp3.Call linkResponseCall(InfoGps infoGps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = infoGps;

        // create path and map variables
        String localVarPath = "/api/Address/LinkResponse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkResponseValidateBeforeCall(InfoGps infoGps, final ApiCallback _callback) throws ApiException {
        return linkResponseCall(infoGps, _callback);

    }


    private ApiResponse<Void> linkResponseWithHttpInfo(InfoGps infoGps) throws ApiException {
        okhttp3.Call localVarCall = linkResponseValidateBeforeCall(infoGps, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call linkResponseAsync(InfoGps infoGps, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkResponseValidateBeforeCall(infoGps, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class LinkResponseRequestBuilder {
        private String link;
        private List<GpsLocation> coords;

        private LinkResponseRequestBuilder() {
        }

        /**
         * Set link
         * @param link  (optional)
         * @return LinkResponseRequestBuilder
         */
        public LinkResponseRequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Set coords
         * @param coords  (optional)
         * @return LinkResponseRequestBuilder
         */
        public LinkResponseRequestBuilder coords(List<GpsLocation> coords) {
            this.coords = coords;
            return this;
        }
        
        /**
         * Build call for linkResponse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InfoGps infoGps = buildBodyParams();
            return linkResponseCall(infoGps, _callback);
        }

        private InfoGps buildBodyParams() {
            InfoGps infoGps = new InfoGps();
            infoGps.link(this.link);
            infoGps.coords(this.coords);
            return infoGps;
        }

        /**
         * Execute linkResponse request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            InfoGps infoGps = buildBodyParams();
            linkResponseWithHttpInfo(infoGps);
        }

        /**
         * Execute linkResponse request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            InfoGps infoGps = buildBodyParams();
            return linkResponseWithHttpInfo(infoGps);
        }

        /**
         * Execute linkResponse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            InfoGps infoGps = buildBodyParams();
            return linkResponseAsync(infoGps, _callback);
        }
    }

    /**
     * 
     * 
     * @return LinkResponseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LinkResponseRequestBuilder linkResponse() throws IllegalArgumentException {
        return new LinkResponseRequestBuilder();
    }
    private okhttp3.Call verifyByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/AddressVerification/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling verifyById(Async)");
        }

        return verifyByIdCall(id, _callback);

    }


    private ApiResponse<AddressVerificationResult> verifyByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = verifyByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AddressVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyByIdAsync(Long id, final ApiCallback<AddressVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AddressVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyByIdRequestBuilder {
        private final Long id;

        private VerifyByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for verifyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyByIdCall(id, _callback);
        }


        /**
         * Execute verifyById request
         * @return AddressVerificationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AddressVerificationResult execute() throws ApiException {
            ApiResponse<AddressVerificationResult> localVarResp = verifyByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyById request with HTTP info returned
         * @return ApiResponse&lt;AddressVerificationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddressVerificationResult> executeWithHttpInfo() throws ApiException {
            return verifyByIdWithHttpInfo(id);
        }

        /**
         * Execute verifyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddressVerificationResult> _callback) throws ApiException {
            return verifyByIdAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return VerifyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyByIdRequestBuilder verifyById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new VerifyByIdRequestBuilder(id);
    }
    private okhttp3.Call verifyById_0Call(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/AddressVerification/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyById_0ValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling verifyById_0(Async)");
        }

        return verifyById_0Call(id, _callback);

    }


    private ApiResponse<AddressVerificationDeleteResult> verifyById_0WithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = verifyById_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AddressVerificationDeleteResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyById_0Async(Long id, final ApiCallback<AddressVerificationDeleteResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyById_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AddressVerificationDeleteResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyById0RequestBuilder {
        private final Long id;

        private VerifyById0RequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for verifyById_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyById_0Call(id, _callback);
        }


        /**
         * Execute verifyById_0 request
         * @return AddressVerificationDeleteResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AddressVerificationDeleteResult execute() throws ApiException {
            ApiResponse<AddressVerificationDeleteResult> localVarResp = verifyById_0WithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyById_0 request with HTTP info returned
         * @return ApiResponse&lt;AddressVerificationDeleteResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddressVerificationDeleteResult> executeWithHttpInfo() throws ApiException {
            return verifyById_0WithHttpInfo(id);
        }

        /**
         * Execute verifyById_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddressVerificationDeleteResult> _callback) throws ApiException {
            return verifyById_0Async(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return VerifyById0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyById0RequestBuilder verifyById_0(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new VerifyById0RequestBuilder(id);
    }
    private okhttp3.Call verifyByLevelCall(AddressRequest addressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addressRequest;

        // create path and map variables
        String localVarPath = "/api/Address/VerificationByLevel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyByLevelValidateBeforeCall(AddressRequest addressRequest, final ApiCallback _callback) throws ApiException {
        return verifyByLevelCall(addressRequest, _callback);

    }


    private ApiResponse<AddressVerificationResult> verifyByLevelWithHttpInfo(AddressRequest addressRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyByLevelValidateBeforeCall(addressRequest, null);
        Type localVarReturnType = new TypeToken<AddressVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyByLevelAsync(AddressRequest addressRequest, final ApiCallback<AddressVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyByLevelValidateBeforeCall(addressRequest, _callback);
        Type localVarReturnType = new TypeToken<AddressVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyByLevelRequestBuilder {
        private String referenceId;
        private String email;
        private Long naturalPersonId;
        private Long naturalPersonIndexId;
        private String name;
        private String surname;
        private String mobilePhone;
        private String language;
        private Integer verificationLevel;
        private String document;
        private String street;
        private String streetNumber;
        private String unit;
        private String district;
        private String city;
        private String region;
        private String zipCode;
        private String country;
        private String fullAddress;
        private Boolean skipDocumentComparison;
        private Integer validityPeriod;

        private VerifyByLevelRequestBuilder() {
        }

        /**
         * Set referenceId
         * @param referenceId  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder referenceId(String referenceId) {
            this.referenceId = referenceId;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set naturalPersonId
         * @param naturalPersonId  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder naturalPersonId(Long naturalPersonId) {
            this.naturalPersonId = naturalPersonId;
            return this;
        }
        
        /**
         * Set naturalPersonIndexId
         * @param naturalPersonIndexId  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder naturalPersonIndexId(Long naturalPersonIndexId) {
            this.naturalPersonIndexId = naturalPersonIndexId;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set surname
         * @param surname  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder surname(String surname) {
            this.surname = surname;
            return this;
        }
        
        /**
         * Set mobilePhone
         * @param mobilePhone  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder mobilePhone(String mobilePhone) {
            this.mobilePhone = mobilePhone;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set verificationLevel
         * @param verificationLevel  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder verificationLevel(Integer verificationLevel) {
            this.verificationLevel = verificationLevel;
            return this;
        }
        
        /**
         * Set document
         * @param document  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder document(String document) {
            this.document = document;
            return this;
        }
        
        /**
         * Set street
         * @param street  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder street(String street) {
            this.street = street;
            return this;
        }
        
        /**
         * Set streetNumber
         * @param streetNumber  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder streetNumber(String streetNumber) {
            this.streetNumber = streetNumber;
            return this;
        }
        
        /**
         * Set unit
         * @param unit  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder unit(String unit) {
            this.unit = unit;
            return this;
        }
        
        /**
         * Set district
         * @param district  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder district(String district) {
            this.district = district;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set region
         * @param region  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder region(String region) {
            this.region = region;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set fullAddress
         * @param fullAddress  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder fullAddress(String fullAddress) {
            this.fullAddress = fullAddress;
            return this;
        }
        
        /**
         * Set skipDocumentComparison
         * @param skipDocumentComparison  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder skipDocumentComparison(Boolean skipDocumentComparison) {
            this.skipDocumentComparison = skipDocumentComparison;
            return this;
        }
        
        /**
         * Set validityPeriod
         * @param validityPeriod  (optional)
         * @return VerifyByLevelRequestBuilder
         */
        public VerifyByLevelRequestBuilder validityPeriod(Integer validityPeriod) {
            this.validityPeriod = validityPeriod;
            return this;
        }
        
        /**
         * Build call for verifyByLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddressRequest addressRequest = buildBodyParams();
            return verifyByLevelCall(addressRequest, _callback);
        }

        private AddressRequest buildBodyParams() {
            AddressRequest addressRequest = new AddressRequest();
            addressRequest.referenceId(this.referenceId);
            addressRequest.email(this.email);
            addressRequest.naturalPersonId(this.naturalPersonId);
            addressRequest.naturalPersonIndexId(this.naturalPersonIndexId);
            addressRequest.name(this.name);
            addressRequest.surname(this.surname);
            addressRequest.mobilePhone(this.mobilePhone);
            addressRequest.language(this.language);
            addressRequest.verificationLevel(this.verificationLevel);
            addressRequest.document(this.document);
            addressRequest.street(this.street);
            addressRequest.streetNumber(this.streetNumber);
            addressRequest.unit(this.unit);
            addressRequest.district(this.district);
            addressRequest.city(this.city);
            addressRequest.region(this.region);
            addressRequest.zipCode(this.zipCode);
            addressRequest.country(this.country);
            addressRequest.fullAddress(this.fullAddress);
            addressRequest.skipDocumentComparison(this.skipDocumentComparison);
            addressRequest.validityPeriod(this.validityPeriod);
            return addressRequest;
        }

        /**
         * Execute verifyByLevel request
         * @return AddressVerificationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AddressVerificationResult execute() throws ApiException {
            AddressRequest addressRequest = buildBodyParams();
            ApiResponse<AddressVerificationResult> localVarResp = verifyByLevelWithHttpInfo(addressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyByLevel request with HTTP info returned
         * @return ApiResponse&lt;AddressVerificationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddressVerificationResult> executeWithHttpInfo() throws ApiException {
            AddressRequest addressRequest = buildBodyParams();
            return verifyByLevelWithHttpInfo(addressRequest);
        }

        /**
         * Execute verifyByLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddressVerificationResult> _callback) throws ApiException {
            AddressRequest addressRequest = buildBodyParams();
            return verifyByLevelAsync(addressRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return VerifyByLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyByLevelRequestBuilder verifyByLevel() throws IllegalArgumentException {
        return new VerifyByLevelRequestBuilder();
    }
    private okhttp3.Call verifyCertificatePdfCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Address/AddressVerification/{id}/certificate.pdf"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyCertificatePdfValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling verifyCertificatePdf(Async)");
        }

        return verifyCertificatePdfCall(id, _callback);

    }


    private ApiResponse<File> verifyCertificatePdfWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = verifyCertificatePdfValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyCertificatePdfAsync(Integer id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyCertificatePdfValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyCertificatePdfRequestBuilder {
        private final Integer id;

        private VerifyCertificatePdfRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for verifyCertificatePdf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyCertificatePdfCall(id, _callback);
        }


        /**
         * Execute verifyCertificatePdf request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = verifyCertificatePdfWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyCertificatePdf request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return verifyCertificatePdfWithHttpInfo(id);
        }

        /**
         * Execute verifyCertificatePdf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return verifyCertificatePdfAsync(id, _callback);
        }
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return VerifyCertificatePdfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VerifyCertificatePdfRequestBuilder verifyCertificatePdf(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new VerifyCertificatePdfRequestBuilder(id);
    }
}

/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BaseResponse;
import com.konfigthis.client.model.StringBaseResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddNaturalPersonDataSaveResult
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddNaturalPersonDataSaveResult {
  public static final String SERIALIZED_NAME_NATURAL_PERSON_ADDED = "naturalPersonAdded";
  @SerializedName(SERIALIZED_NAME_NATURAL_PERSON_ADDED)
  private BaseResponse naturalPersonAdded;

  public static final String SERIALIZED_NAME_ID_DOCUMENT_SAVED = "idDocumentSaved";
  @SerializedName(SERIALIZED_NAME_ID_DOCUMENT_SAVED)
  private BaseResponse idDocumentSaved;

  public static final String SERIALIZED_NAME_LIVENESS_CHECK_U_R_L = "livenessCheckURL";
  @SerializedName(SERIALIZED_NAME_LIVENESS_CHECK_U_R_L)
  private StringBaseResponse livenessCheckURL;

  public static final String SERIALIZED_NAME_FACE_SAVED = "faceSaved";
  @SerializedName(SERIALIZED_NAME_FACE_SAVED)
  private BaseResponse faceSaved;

  public static final String SERIALIZED_NAME_ADDRESS_DOCUMENT_SAVED = "addressDocumentSaved";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DOCUMENT_SAVED)
  private BaseResponse addressDocumentSaved;

  public static final String SERIALIZED_NAME_VERIFICATION_STARTED = "verificationStarted";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STARTED)
  private BaseResponse verificationStarted;

  public static final String SERIALIZED_NAME_ALL_SUCCEEDED = "allSucceeded";
  @SerializedName(SERIALIZED_NAME_ALL_SUCCEEDED)
  private Boolean allSucceeded;

  public AddNaturalPersonDataSaveResult() {
  }

  
  public AddNaturalPersonDataSaveResult(
     Boolean allSucceeded
  ) {
    this();
    this.allSucceeded = allSucceeded;
  }

  public AddNaturalPersonDataSaveResult naturalPersonAdded(BaseResponse naturalPersonAdded) {
    
    
    
    
    this.naturalPersonAdded = naturalPersonAdded;
    return this;
  }

   /**
   * Get naturalPersonAdded
   * @return naturalPersonAdded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BaseResponse getNaturalPersonAdded() {
    return naturalPersonAdded;
  }


  public void setNaturalPersonAdded(BaseResponse naturalPersonAdded) {
    
    
    
    this.naturalPersonAdded = naturalPersonAdded;
  }


  public AddNaturalPersonDataSaveResult idDocumentSaved(BaseResponse idDocumentSaved) {
    
    
    
    
    this.idDocumentSaved = idDocumentSaved;
    return this;
  }

   /**
   * Get idDocumentSaved
   * @return idDocumentSaved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BaseResponse getIdDocumentSaved() {
    return idDocumentSaved;
  }


  public void setIdDocumentSaved(BaseResponse idDocumentSaved) {
    
    
    
    this.idDocumentSaved = idDocumentSaved;
  }


  public AddNaturalPersonDataSaveResult livenessCheckURL(StringBaseResponse livenessCheckURL) {
    
    
    
    
    this.livenessCheckURL = livenessCheckURL;
    return this;
  }

   /**
   * Get livenessCheckURL
   * @return livenessCheckURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StringBaseResponse getLivenessCheckURL() {
    return livenessCheckURL;
  }


  public void setLivenessCheckURL(StringBaseResponse livenessCheckURL) {
    
    
    
    this.livenessCheckURL = livenessCheckURL;
  }


  public AddNaturalPersonDataSaveResult faceSaved(BaseResponse faceSaved) {
    
    
    
    
    this.faceSaved = faceSaved;
    return this;
  }

   /**
   * Get faceSaved
   * @return faceSaved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BaseResponse getFaceSaved() {
    return faceSaved;
  }


  public void setFaceSaved(BaseResponse faceSaved) {
    
    
    
    this.faceSaved = faceSaved;
  }


  public AddNaturalPersonDataSaveResult addressDocumentSaved(BaseResponse addressDocumentSaved) {
    
    
    
    
    this.addressDocumentSaved = addressDocumentSaved;
    return this;
  }

   /**
   * Get addressDocumentSaved
   * @return addressDocumentSaved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BaseResponse getAddressDocumentSaved() {
    return addressDocumentSaved;
  }


  public void setAddressDocumentSaved(BaseResponse addressDocumentSaved) {
    
    
    
    this.addressDocumentSaved = addressDocumentSaved;
  }


  public AddNaturalPersonDataSaveResult verificationStarted(BaseResponse verificationStarted) {
    
    
    
    
    this.verificationStarted = verificationStarted;
    return this;
  }

   /**
   * Get verificationStarted
   * @return verificationStarted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BaseResponse getVerificationStarted() {
    return verificationStarted;
  }


  public void setVerificationStarted(BaseResponse verificationStarted) {
    
    
    
    this.verificationStarted = verificationStarted;
  }


   /**
   * Get allSucceeded
   * @return allSucceeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAllSucceeded() {
    return allSucceeded;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddNaturalPersonDataSaveResult instance itself
   */
  public AddNaturalPersonDataSaveResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddNaturalPersonDataSaveResult addNaturalPersonDataSaveResult = (AddNaturalPersonDataSaveResult) o;
    return Objects.equals(this.naturalPersonAdded, addNaturalPersonDataSaveResult.naturalPersonAdded) &&
        Objects.equals(this.idDocumentSaved, addNaturalPersonDataSaveResult.idDocumentSaved) &&
        Objects.equals(this.livenessCheckURL, addNaturalPersonDataSaveResult.livenessCheckURL) &&
        Objects.equals(this.faceSaved, addNaturalPersonDataSaveResult.faceSaved) &&
        Objects.equals(this.addressDocumentSaved, addNaturalPersonDataSaveResult.addressDocumentSaved) &&
        Objects.equals(this.verificationStarted, addNaturalPersonDataSaveResult.verificationStarted) &&
        Objects.equals(this.allSucceeded, addNaturalPersonDataSaveResult.allSucceeded)&&
        Objects.equals(this.additionalProperties, addNaturalPersonDataSaveResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(naturalPersonAdded, idDocumentSaved, livenessCheckURL, faceSaved, addressDocumentSaved, verificationStarted, allSucceeded, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddNaturalPersonDataSaveResult {\n");
    sb.append("    naturalPersonAdded: ").append(toIndentedString(naturalPersonAdded)).append("\n");
    sb.append("    idDocumentSaved: ").append(toIndentedString(idDocumentSaved)).append("\n");
    sb.append("    livenessCheckURL: ").append(toIndentedString(livenessCheckURL)).append("\n");
    sb.append("    faceSaved: ").append(toIndentedString(faceSaved)).append("\n");
    sb.append("    addressDocumentSaved: ").append(toIndentedString(addressDocumentSaved)).append("\n");
    sb.append("    verificationStarted: ").append(toIndentedString(verificationStarted)).append("\n");
    sb.append("    allSucceeded: ").append(toIndentedString(allSucceeded)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("naturalPersonAdded");
    openapiFields.add("idDocumentSaved");
    openapiFields.add("livenessCheckURL");
    openapiFields.add("faceSaved");
    openapiFields.add("addressDocumentSaved");
    openapiFields.add("verificationStarted");
    openapiFields.add("allSucceeded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddNaturalPersonDataSaveResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddNaturalPersonDataSaveResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddNaturalPersonDataSaveResult is not found in the empty JSON string", AddNaturalPersonDataSaveResult.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `naturalPersonAdded`
      if (jsonObj.get("naturalPersonAdded") != null && !jsonObj.get("naturalPersonAdded").isJsonNull()) {
        BaseResponse.validateJsonObject(jsonObj.getAsJsonObject("naturalPersonAdded"));
      }
      // validate the optional field `idDocumentSaved`
      if (jsonObj.get("idDocumentSaved") != null && !jsonObj.get("idDocumentSaved").isJsonNull()) {
        BaseResponse.validateJsonObject(jsonObj.getAsJsonObject("idDocumentSaved"));
      }
      // validate the optional field `livenessCheckURL`
      if (jsonObj.get("livenessCheckURL") != null && !jsonObj.get("livenessCheckURL").isJsonNull()) {
        StringBaseResponse.validateJsonObject(jsonObj.getAsJsonObject("livenessCheckURL"));
      }
      // validate the optional field `faceSaved`
      if (jsonObj.get("faceSaved") != null && !jsonObj.get("faceSaved").isJsonNull()) {
        BaseResponse.validateJsonObject(jsonObj.getAsJsonObject("faceSaved"));
      }
      // validate the optional field `addressDocumentSaved`
      if (jsonObj.get("addressDocumentSaved") != null && !jsonObj.get("addressDocumentSaved").isJsonNull()) {
        BaseResponse.validateJsonObject(jsonObj.getAsJsonObject("addressDocumentSaved"));
      }
      // validate the optional field `verificationStarted`
      if (jsonObj.get("verificationStarted") != null && !jsonObj.get("verificationStarted").isJsonNull()) {
        BaseResponse.validateJsonObject(jsonObj.getAsJsonObject("verificationStarted"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddNaturalPersonDataSaveResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddNaturalPersonDataSaveResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddNaturalPersonDataSaveResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddNaturalPersonDataSaveResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AddNaturalPersonDataSaveResult>() {
           @Override
           public void write(JsonWriter out, AddNaturalPersonDataSaveResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddNaturalPersonDataSaveResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddNaturalPersonDataSaveResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddNaturalPersonDataSaveResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddNaturalPersonDataSaveResult
  * @throws IOException if the JSON string is invalid with respect to AddNaturalPersonDataSaveResult
  */
  public static AddNaturalPersonDataSaveResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddNaturalPersonDataSaveResult.class);
  }

 /**
  * Convert an instance of AddNaturalPersonDataSaveResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


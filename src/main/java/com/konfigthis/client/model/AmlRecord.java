/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Asset;
import com.konfigthis.client.model.Associate;
import com.konfigthis.client.model.Field;
import com.konfigthis.client.model.Media;
import com.konfigthis.client.model.SourceNote;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AmlRecord
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AmlRecord {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_IS_DEATH = "isDeath";
  @SerializedName(SERIALIZED_NAME_IS_DEATH)
  private Boolean isDeath;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_PLACE_OF_BIRTH = "placeOfBirth";
  @SerializedName(SERIALIZED_NAME_PLACE_OF_BIRTH)
  private String placeOfBirth;

  public static final String SERIALIZED_NAME_URL_REPORT = "urlReport";
  @SerializedName(SERIALIZED_NAME_URL_REPORT)
  private String urlReport;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = null;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SANCTIONS_REFERENCES = "sanctionsReferences";
  @SerializedName(SERIALIZED_NAME_SANCTIONS_REFERENCES)
  private List<String> sanctionsReferences = null;

  public static final String SERIALIZED_NAME_OFFICIAL_LISTS = "officialLists";
  @SerializedName(SERIALIZED_NAME_OFFICIAL_LISTS)
  private List<String> officialLists = null;

  public static final String SERIALIZED_NAME_IMPORTAN_DATES = "importanDates";
  @SerializedName(SERIALIZED_NAME_IMPORTAN_DATES)
  private List<String> importanDates = null;

  public static final String SERIALIZED_NAME_OTHER_NAMES = "otherNames";
  @SerializedName(SERIALIZED_NAME_OTHER_NAMES)
  private List<String> otherNames = null;

  public static final String SERIALIZED_NAME_ID_NUMBERS = "idNumbers";
  @SerializedName(SERIALIZED_NAME_ID_NUMBERS)
  private List<String> idNumbers = null;

  public static final String SERIALIZED_NAME_ASSOCIATES = "associates";
  @SerializedName(SERIALIZED_NAME_ASSOCIATES)
  private List<String> associates = null;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<String> images = null;

  public static final String SERIALIZED_NAME_RELATED_PERSONS = "relatedPersons";
  @SerializedName(SERIALIZED_NAME_RELATED_PERSONS)
  private List<Associate> relatedPersons = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<String> filters = null;

  public static final String SERIALIZED_NAME_MATCH_TYPES = "matchTypes";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPES)
  private List<String> matchTypes = null;

  public static final String SERIALIZED_NAME_ALTERNATIVE_NAMES = "alternativeNames";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_NAMES)
  private List<String> alternativeNames = null;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources = null;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = null;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private List<Asset> assets = null;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<Media> media = null;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, List<Field>> fields = null;

  public static final String SERIALIZED_NAME_SOURCE_NOTES = "sourceNotes";
  @SerializedName(SERIALIZED_NAME_SOURCE_NOTES)
  private Map<String, SourceNote> sourceNotes = null;

  public AmlRecord() {
  }

  public AmlRecord id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public AmlRecord source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public AmlRecord firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public AmlRecord middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public AmlRecord lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public AmlRecord gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public AmlRecord status(Integer status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStatus() {
    return status;
  }


  public void setStatus(Integer status) {
    
    
    
    this.status = status;
  }


  public AmlRecord isDeath(Boolean isDeath) {
    
    
    
    
    this.isDeath = isDeath;
    return this;
  }

   /**
   * Get isDeath
   * @return isDeath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsDeath() {
    return isDeath;
  }


  public void setIsDeath(Boolean isDeath) {
    
    
    
    this.isDeath = isDeath;
  }


  public AmlRecord dateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public AmlRecord placeOfBirth(String placeOfBirth) {
    
    
    
    
    this.placeOfBirth = placeOfBirth;
    return this;
  }

   /**
   * Get placeOfBirth
   * @return placeOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlaceOfBirth() {
    return placeOfBirth;
  }


  public void setPlaceOfBirth(String placeOfBirth) {
    
    
    
    this.placeOfBirth = placeOfBirth;
  }


  public AmlRecord urlReport(String urlReport) {
    
    
    
    
    this.urlReport = urlReport;
    return this;
  }

   /**
   * Get urlReport
   * @return urlReport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrlReport() {
    return urlReport;
  }


  public void setUrlReport(String urlReport) {
    
    
    
    this.urlReport = urlReport;
  }


  public AmlRecord categories(List<String> categories) {
    
    
    
    
    this.categories = categories;
    return this;
  }

  public AmlRecord addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCategories() {
    return categories;
  }


  public void setCategories(List<String> categories) {
    
    
    
    this.categories = categories;
  }


  public AmlRecord notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public AmlRecord sanctionsReferences(List<String> sanctionsReferences) {
    
    
    
    
    this.sanctionsReferences = sanctionsReferences;
    return this;
  }

  public AmlRecord addSanctionsReferencesItem(String sanctionsReferencesItem) {
    if (this.sanctionsReferences == null) {
      this.sanctionsReferences = new ArrayList<>();
    }
    this.sanctionsReferences.add(sanctionsReferencesItem);
    return this;
  }

   /**
   * Get sanctionsReferences
   * @return sanctionsReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSanctionsReferences() {
    return sanctionsReferences;
  }


  public void setSanctionsReferences(List<String> sanctionsReferences) {
    
    
    
    this.sanctionsReferences = sanctionsReferences;
  }


  public AmlRecord officialLists(List<String> officialLists) {
    
    
    
    
    this.officialLists = officialLists;
    return this;
  }

  public AmlRecord addOfficialListsItem(String officialListsItem) {
    if (this.officialLists == null) {
      this.officialLists = new ArrayList<>();
    }
    this.officialLists.add(officialListsItem);
    return this;
  }

   /**
   * Get officialLists
   * @return officialLists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOfficialLists() {
    return officialLists;
  }


  public void setOfficialLists(List<String> officialLists) {
    
    
    
    this.officialLists = officialLists;
  }


  public AmlRecord importanDates(List<String> importanDates) {
    
    
    
    
    this.importanDates = importanDates;
    return this;
  }

  public AmlRecord addImportanDatesItem(String importanDatesItem) {
    if (this.importanDates == null) {
      this.importanDates = new ArrayList<>();
    }
    this.importanDates.add(importanDatesItem);
    return this;
  }

   /**
   * Get importanDates
   * @return importanDates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getImportanDates() {
    return importanDates;
  }


  public void setImportanDates(List<String> importanDates) {
    
    
    
    this.importanDates = importanDates;
  }


  public AmlRecord otherNames(List<String> otherNames) {
    
    
    
    
    this.otherNames = otherNames;
    return this;
  }

  public AmlRecord addOtherNamesItem(String otherNamesItem) {
    if (this.otherNames == null) {
      this.otherNames = new ArrayList<>();
    }
    this.otherNames.add(otherNamesItem);
    return this;
  }

   /**
   * Get otherNames
   * @return otherNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOtherNames() {
    return otherNames;
  }


  public void setOtherNames(List<String> otherNames) {
    
    
    
    this.otherNames = otherNames;
  }


  public AmlRecord idNumbers(List<String> idNumbers) {
    
    
    
    
    this.idNumbers = idNumbers;
    return this;
  }

  public AmlRecord addIdNumbersItem(String idNumbersItem) {
    if (this.idNumbers == null) {
      this.idNumbers = new ArrayList<>();
    }
    this.idNumbers.add(idNumbersItem);
    return this;
  }

   /**
   * Get idNumbers
   * @return idNumbers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getIdNumbers() {
    return idNumbers;
  }


  public void setIdNumbers(List<String> idNumbers) {
    
    
    
    this.idNumbers = idNumbers;
  }


  public AmlRecord associates(List<String> associates) {
    
    
    
    
    this.associates = associates;
    return this;
  }

  public AmlRecord addAssociatesItem(String associatesItem) {
    if (this.associates == null) {
      this.associates = new ArrayList<>();
    }
    this.associates.add(associatesItem);
    return this;
  }

   /**
   * Get associates
   * @return associates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAssociates() {
    return associates;
  }


  public void setAssociates(List<String> associates) {
    
    
    
    this.associates = associates;
  }


  public AmlRecord images(List<String> images) {
    
    
    
    
    this.images = images;
    return this;
  }

  public AmlRecord addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getImages() {
    return images;
  }


  public void setImages(List<String> images) {
    
    
    
    this.images = images;
  }


  public AmlRecord relatedPersons(List<Associate> relatedPersons) {
    
    
    
    
    this.relatedPersons = relatedPersons;
    return this;
  }

  public AmlRecord addRelatedPersonsItem(Associate relatedPersonsItem) {
    if (this.relatedPersons == null) {
      this.relatedPersons = new ArrayList<>();
    }
    this.relatedPersons.add(relatedPersonsItem);
    return this;
  }

   /**
   * Get relatedPersons
   * @return relatedPersons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Associate> getRelatedPersons() {
    return relatedPersons;
  }


  public void setRelatedPersons(List<Associate> relatedPersons) {
    
    
    
    this.relatedPersons = relatedPersons;
  }


  public AmlRecord name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public AmlRecord score(Double score) {
    
    
    
    
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getScore() {
    return score;
  }


  public void setScore(Double score) {
    
    
    
    this.score = score;
  }


  public AmlRecord entityType(String entityType) {
    
    
    
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEntityType() {
    return entityType;
  }


  public void setEntityType(String entityType) {
    
    
    
    this.entityType = entityType;
  }


  public AmlRecord filters(List<String> filters) {
    
    
    
    
    this.filters = filters;
    return this;
  }

  public AmlRecord addFiltersItem(String filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getFilters() {
    return filters;
  }


  public void setFilters(List<String> filters) {
    
    
    
    this.filters = filters;
  }


  public AmlRecord matchTypes(List<String> matchTypes) {
    
    
    
    
    this.matchTypes = matchTypes;
    return this;
  }

  public AmlRecord addMatchTypesItem(String matchTypesItem) {
    if (this.matchTypes == null) {
      this.matchTypes = new ArrayList<>();
    }
    this.matchTypes.add(matchTypesItem);
    return this;
  }

   /**
   * Get matchTypes
   * @return matchTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMatchTypes() {
    return matchTypes;
  }


  public void setMatchTypes(List<String> matchTypes) {
    
    
    
    this.matchTypes = matchTypes;
  }


  public AmlRecord alternativeNames(List<String> alternativeNames) {
    
    
    
    
    this.alternativeNames = alternativeNames;
    return this;
  }

  public AmlRecord addAlternativeNamesItem(String alternativeNamesItem) {
    if (this.alternativeNames == null) {
      this.alternativeNames = new ArrayList<>();
    }
    this.alternativeNames.add(alternativeNamesItem);
    return this;
  }

   /**
   * Get alternativeNames
   * @return alternativeNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAlternativeNames() {
    return alternativeNames;
  }


  public void setAlternativeNames(List<String> alternativeNames) {
    
    
    
    this.alternativeNames = alternativeNames;
  }


  public AmlRecord sources(List<String> sources) {
    
    
    
    
    this.sources = sources;
    return this;
  }

  public AmlRecord addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * Get sources
   * @return sources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSources() {
    return sources;
  }


  public void setSources(List<String> sources) {
    
    
    
    this.sources = sources;
  }


  public AmlRecord types(List<String> types) {
    
    
    
    
    this.types = types;
    return this;
  }

  public AmlRecord addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTypes() {
    return types;
  }


  public void setTypes(List<String> types) {
    
    
    
    this.types = types;
  }


  public AmlRecord assets(List<Asset> assets) {
    
    
    
    
    this.assets = assets;
    return this;
  }

  public AmlRecord addAssetsItem(Asset assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<>();
    }
    this.assets.add(assetsItem);
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Asset> getAssets() {
    return assets;
  }


  public void setAssets(List<Asset> assets) {
    
    
    
    this.assets = assets;
  }


  public AmlRecord media(List<Media> media) {
    
    
    
    
    this.media = media;
    return this;
  }

  public AmlRecord addMediaItem(Media mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

   /**
   * Get media
   * @return media
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Media> getMedia() {
    return media;
  }


  public void setMedia(List<Media> media) {
    
    
    
    this.media = media;
  }


  public AmlRecord fields(Map<String, List<Field>> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public AmlRecord putFieldsItem(String key, List<Field> fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, List<Field>> getFields() {
    return fields;
  }


  public void setFields(Map<String, List<Field>> fields) {
    
    
    
    this.fields = fields;
  }


  public AmlRecord sourceNotes(Map<String, SourceNote> sourceNotes) {
    
    
    
    
    this.sourceNotes = sourceNotes;
    return this;
  }

  public AmlRecord putSourceNotesItem(String key, SourceNote sourceNotesItem) {
    if (this.sourceNotes == null) {
      this.sourceNotes = new HashMap<>();
    }
    this.sourceNotes.put(key, sourceNotesItem);
    return this;
  }

   /**
   * Get sourceNotes
   * @return sourceNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, SourceNote> getSourceNotes() {
    return sourceNotes;
  }


  public void setSourceNotes(Map<String, SourceNote> sourceNotes) {
    
    
    
    this.sourceNotes = sourceNotes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AmlRecord instance itself
   */
  public AmlRecord putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmlRecord amlRecord = (AmlRecord) o;
    return Objects.equals(this.id, amlRecord.id) &&
        Objects.equals(this.source, amlRecord.source) &&
        Objects.equals(this.firstName, amlRecord.firstName) &&
        Objects.equals(this.middleName, amlRecord.middleName) &&
        Objects.equals(this.lastName, amlRecord.lastName) &&
        Objects.equals(this.gender, amlRecord.gender) &&
        Objects.equals(this.status, amlRecord.status) &&
        Objects.equals(this.isDeath, amlRecord.isDeath) &&
        Objects.equals(this.dateOfBirth, amlRecord.dateOfBirth) &&
        Objects.equals(this.placeOfBirth, amlRecord.placeOfBirth) &&
        Objects.equals(this.urlReport, amlRecord.urlReport) &&
        Objects.equals(this.categories, amlRecord.categories) &&
        Objects.equals(this.notes, amlRecord.notes) &&
        Objects.equals(this.sanctionsReferences, amlRecord.sanctionsReferences) &&
        Objects.equals(this.officialLists, amlRecord.officialLists) &&
        Objects.equals(this.importanDates, amlRecord.importanDates) &&
        Objects.equals(this.otherNames, amlRecord.otherNames) &&
        Objects.equals(this.idNumbers, amlRecord.idNumbers) &&
        Objects.equals(this.associates, amlRecord.associates) &&
        Objects.equals(this.images, amlRecord.images) &&
        Objects.equals(this.relatedPersons, amlRecord.relatedPersons) &&
        Objects.equals(this.name, amlRecord.name) &&
        Objects.equals(this.score, amlRecord.score) &&
        Objects.equals(this.entityType, amlRecord.entityType) &&
        Objects.equals(this.filters, amlRecord.filters) &&
        Objects.equals(this.matchTypes, amlRecord.matchTypes) &&
        Objects.equals(this.alternativeNames, amlRecord.alternativeNames) &&
        Objects.equals(this.sources, amlRecord.sources) &&
        Objects.equals(this.types, amlRecord.types) &&
        Objects.equals(this.assets, amlRecord.assets) &&
        Objects.equals(this.media, amlRecord.media) &&
        Objects.equals(this.fields, amlRecord.fields) &&
        Objects.equals(this.sourceNotes, amlRecord.sourceNotes)&&
        Objects.equals(this.additionalProperties, amlRecord.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, source, firstName, middleName, lastName, gender, status, isDeath, dateOfBirth, placeOfBirth, urlReport, categories, notes, sanctionsReferences, officialLists, importanDates, otherNames, idNumbers, associates, images, relatedPersons, name, score, entityType, filters, matchTypes, alternativeNames, sources, types, assets, media, fields, sourceNotes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmlRecord {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isDeath: ").append(toIndentedString(isDeath)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    urlReport: ").append(toIndentedString(urlReport)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    sanctionsReferences: ").append(toIndentedString(sanctionsReferences)).append("\n");
    sb.append("    officialLists: ").append(toIndentedString(officialLists)).append("\n");
    sb.append("    importanDates: ").append(toIndentedString(importanDates)).append("\n");
    sb.append("    otherNames: ").append(toIndentedString(otherNames)).append("\n");
    sb.append("    idNumbers: ").append(toIndentedString(idNumbers)).append("\n");
    sb.append("    associates: ").append(toIndentedString(associates)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    relatedPersons: ").append(toIndentedString(relatedPersons)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    matchTypes: ").append(toIndentedString(matchTypes)).append("\n");
    sb.append("    alternativeNames: ").append(toIndentedString(alternativeNames)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    sourceNotes: ").append(toIndentedString(sourceNotes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("source");
    openapiFields.add("firstName");
    openapiFields.add("middleName");
    openapiFields.add("lastName");
    openapiFields.add("gender");
    openapiFields.add("status");
    openapiFields.add("isDeath");
    openapiFields.add("dateOfBirth");
    openapiFields.add("placeOfBirth");
    openapiFields.add("urlReport");
    openapiFields.add("categories");
    openapiFields.add("notes");
    openapiFields.add("sanctionsReferences");
    openapiFields.add("officialLists");
    openapiFields.add("importanDates");
    openapiFields.add("otherNames");
    openapiFields.add("idNumbers");
    openapiFields.add("associates");
    openapiFields.add("images");
    openapiFields.add("relatedPersons");
    openapiFields.add("name");
    openapiFields.add("score");
    openapiFields.add("entityType");
    openapiFields.add("filters");
    openapiFields.add("matchTypes");
    openapiFields.add("alternativeNames");
    openapiFields.add("sources");
    openapiFields.add("types");
    openapiFields.add("assets");
    openapiFields.add("media");
    openapiFields.add("fields");
    openapiFields.add("sourceNotes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AmlRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AmlRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmlRecord is not found in the empty JSON string", AmlRecord.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("source").isJsonNull() && (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && (jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("gender").isJsonNull() && (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("placeOfBirth").isJsonNull() && (jsonObj.get("placeOfBirth") != null && !jsonObj.get("placeOfBirth").isJsonNull()) && !jsonObj.get("placeOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeOfBirth").toString()));
      }
      if (!jsonObj.get("urlReport").isJsonNull() && (jsonObj.get("urlReport") != null && !jsonObj.get("urlReport").isJsonNull()) && !jsonObj.get("urlReport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlReport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlReport").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string or null but got `%s`", jsonObj.get("categories").toString()));
      }
      if (!jsonObj.get("notes").isJsonNull() && (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("sanctionsReferences") != null && !jsonObj.get("sanctionsReferences").isJsonNull() && !jsonObj.get("sanctionsReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sanctionsReferences` to be an array in the JSON string or null but got `%s`", jsonObj.get("sanctionsReferences").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("officialLists") != null && !jsonObj.get("officialLists").isJsonNull() && !jsonObj.get("officialLists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `officialLists` to be an array in the JSON string or null but got `%s`", jsonObj.get("officialLists").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("importanDates") != null && !jsonObj.get("importanDates").isJsonNull() && !jsonObj.get("importanDates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `importanDates` to be an array in the JSON string or null but got `%s`", jsonObj.get("importanDates").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("otherNames") != null && !jsonObj.get("otherNames").isJsonNull() && !jsonObj.get("otherNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherNames` to be an array in the JSON string or null but got `%s`", jsonObj.get("otherNames").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("idNumbers") != null && !jsonObj.get("idNumbers").isJsonNull() && !jsonObj.get("idNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumbers` to be an array in the JSON string or null but got `%s`", jsonObj.get("idNumbers").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("associates") != null && !jsonObj.get("associates").isJsonNull() && !jsonObj.get("associates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `associates` to be an array in the JSON string or null but got `%s`", jsonObj.get("associates").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull() && !jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string or null but got `%s`", jsonObj.get("images").toString()));
      }
      if (jsonObj.get("relatedPersons") != null && !jsonObj.get("relatedPersons").isJsonNull()) {
        JsonArray jsonArrayrelatedPersons = jsonObj.getAsJsonArray("relatedPersons");
        if (jsonArrayrelatedPersons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedPersons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedPersons` to be an array in the JSON string but got `%s`", jsonObj.get("relatedPersons").toString()));
          }

          // validate the optional field `relatedPersons` (array)
          for (int i = 0; i < jsonArrayrelatedPersons.size(); i++) {
            Associate.validateJsonObject(jsonArrayrelatedPersons.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("name").isJsonNull() && (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("entityType").isJsonNull() && (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull() && !jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string or null but got `%s`", jsonObj.get("filters").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("matchTypes") != null && !jsonObj.get("matchTypes").isJsonNull() && !jsonObj.get("matchTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchTypes` to be an array in the JSON string or null but got `%s`", jsonObj.get("matchTypes").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("alternativeNames") != null && !jsonObj.get("alternativeNames").isJsonNull() && !jsonObj.get("alternativeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeNames` to be an array in the JSON string or null but got `%s`", jsonObj.get("alternativeNames").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string or null but got `%s`", jsonObj.get("sources").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string or null but got `%s`", jsonObj.get("types").toString()));
      }
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
        if (jsonArrayassets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assets` to be an array in the JSON string but got `%s`", jsonObj.get("assets").toString()));
          }

          // validate the optional field `assets` (array)
          for (int i = 0; i < jsonArrayassets.size(); i++) {
            Asset.validateJsonObject(jsonArrayassets.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        JsonArray jsonArraymedia = jsonObj.getAsJsonArray("media");
        if (jsonArraymedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("media").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `media` to be an array in the JSON string but got `%s`", jsonObj.get("media").toString()));
          }

          // validate the optional field `media` (array)
          for (int i = 0; i < jsonArraymedia.size(); i++) {
            Media.validateJsonObject(jsonArraymedia.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmlRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmlRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmlRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmlRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<AmlRecord>() {
           @Override
           public void write(JsonWriter out, AmlRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AmlRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AmlRecord instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AmlRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AmlRecord
  * @throws IOException if the JSON string is invalid with respect to AmlRecord
  */
  public static AmlRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmlRecord.class);
  }

 /**
  * Convert an instance of AmlRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


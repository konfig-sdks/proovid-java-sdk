/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EStatus;
import com.konfigthis.client.model.RejectLabelType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NaturalPersonFaceVerificationResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NaturalPersonFaceVerificationResponse {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EStatus status;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_REJECT_LABELS = "rejectLabels";
  @SerializedName(SERIALIZED_NAME_REJECT_LABELS)
  private List<RejectLabelType> rejectLabels = null;

  public static final String SERIALIZED_NAME_FACE_MATCH_CONFIDENCE = "faceMatchConfidence";
  @SerializedName(SERIALIZED_NAME_FACE_MATCH_CONFIDENCE)
  private Double faceMatchConfidence;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private OffsetDateTime lastUpdatedDate;

  public NaturalPersonFaceVerificationResponse() {
  }

  public NaturalPersonFaceVerificationResponse status(EStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EStatus getStatus() {
    return status;
  }


  public void setStatus(EStatus status) {
    
    
    
    this.status = status;
  }


  public NaturalPersonFaceVerificationResponse comment(String comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    
    
    
    this.comment = comment;
  }


  public NaturalPersonFaceVerificationResponse rejectLabels(List<RejectLabelType> rejectLabels) {
    
    
    
    
    this.rejectLabels = rejectLabels;
    return this;
  }

  public NaturalPersonFaceVerificationResponse addRejectLabelsItem(RejectLabelType rejectLabelsItem) {
    if (this.rejectLabels == null) {
      this.rejectLabels = new ArrayList<>();
    }
    this.rejectLabels.add(rejectLabelsItem);
    return this;
  }

   /**
   * Get rejectLabels
   * @return rejectLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RejectLabelType> getRejectLabels() {
    return rejectLabels;
  }


  public void setRejectLabels(List<RejectLabelType> rejectLabels) {
    
    
    
    this.rejectLabels = rejectLabels;
  }


  public NaturalPersonFaceVerificationResponse faceMatchConfidence(Double faceMatchConfidence) {
    
    
    
    
    this.faceMatchConfidence = faceMatchConfidence;
    return this;
  }

   /**
   * Get faceMatchConfidence
   * @return faceMatchConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getFaceMatchConfidence() {
    return faceMatchConfidence;
  }


  public void setFaceMatchConfidence(Double faceMatchConfidence) {
    
    
    
    this.faceMatchConfidence = faceMatchConfidence;
  }


  public NaturalPersonFaceVerificationResponse imageId(String imageId) {
    
    
    
    
    this.imageId = imageId;
    return this;
  }

   /**
   * Get imageId
   * @return imageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageId() {
    return imageId;
  }


  public void setImageId(String imageId) {
    
    
    
    this.imageId = imageId;
  }


  public NaturalPersonFaceVerificationResponse creationDate(OffsetDateTime creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public NaturalPersonFaceVerificationResponse lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

   /**
   * Get lastUpdatedDate
   * @return lastUpdatedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }


  public void setLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NaturalPersonFaceVerificationResponse instance itself
   */
  public NaturalPersonFaceVerificationResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NaturalPersonFaceVerificationResponse naturalPersonFaceVerificationResponse = (NaturalPersonFaceVerificationResponse) o;
    return Objects.equals(this.status, naturalPersonFaceVerificationResponse.status) &&
        Objects.equals(this.comment, naturalPersonFaceVerificationResponse.comment) &&
        Objects.equals(this.rejectLabels, naturalPersonFaceVerificationResponse.rejectLabels) &&
        Objects.equals(this.faceMatchConfidence, naturalPersonFaceVerificationResponse.faceMatchConfidence) &&
        Objects.equals(this.imageId, naturalPersonFaceVerificationResponse.imageId) &&
        Objects.equals(this.creationDate, naturalPersonFaceVerificationResponse.creationDate) &&
        Objects.equals(this.lastUpdatedDate, naturalPersonFaceVerificationResponse.lastUpdatedDate)&&
        Objects.equals(this.additionalProperties, naturalPersonFaceVerificationResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, comment, rejectLabels, faceMatchConfidence, imageId, creationDate, lastUpdatedDate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NaturalPersonFaceVerificationResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    rejectLabels: ").append(toIndentedString(rejectLabels)).append("\n");
    sb.append("    faceMatchConfidence: ").append(toIndentedString(faceMatchConfidence)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("comment");
    openapiFields.add("rejectLabels");
    openapiFields.add("faceMatchConfidence");
    openapiFields.add("imageId");
    openapiFields.add("creationDate");
    openapiFields.add("lastUpdatedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NaturalPersonFaceVerificationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NaturalPersonFaceVerificationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NaturalPersonFaceVerificationResponse is not found in the empty JSON string", NaturalPersonFaceVerificationResponse.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("comment").isJsonNull() && (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("rejectLabels") != null && !jsonObj.get("rejectLabels").isJsonNull() && !jsonObj.get("rejectLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectLabels` to be an array in the JSON string or null but got `%s`", jsonObj.get("rejectLabels").toString()));
      }
      if (!jsonObj.get("imageId").isJsonNull() && (jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) && !jsonObj.get("imageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NaturalPersonFaceVerificationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NaturalPersonFaceVerificationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NaturalPersonFaceVerificationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NaturalPersonFaceVerificationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<NaturalPersonFaceVerificationResponse>() {
           @Override
           public void write(JsonWriter out, NaturalPersonFaceVerificationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NaturalPersonFaceVerificationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NaturalPersonFaceVerificationResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NaturalPersonFaceVerificationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NaturalPersonFaceVerificationResponse
  * @throws IOException if the JSON string is invalid with respect to NaturalPersonFaceVerificationResponse
  */
  public static NaturalPersonFaceVerificationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NaturalPersonFaceVerificationResponse.class);
  }

 /**
  * Convert an instance of NaturalPersonFaceVerificationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


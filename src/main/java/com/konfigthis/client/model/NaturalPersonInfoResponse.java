/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EGender;
import com.konfigthis.client.model.EScore;
import com.konfigthis.client.model.EStatus;
import com.konfigthis.client.model.NaturalPersonAddressVerificationResponse;
import com.konfigthis.client.model.NaturalPersonAmlVerificationResponse;
import com.konfigthis.client.model.NaturalPersonDocumentVerificationResponse;
import com.konfigthis.client.model.NaturalPersonEconomicProfileResponse;
import com.konfigthis.client.model.NaturalPersonFaceVerificationResponse;
import com.konfigthis.client.model.NaturalPersonOccupationResponse;
import com.konfigthis.client.model.NaturalPersonOtherSourceOfIncomeResponse;
import com.konfigthis.client.model.NaturalPersonOtherSourceOfWealthResponse;
import com.konfigthis.client.model.RejectLabelType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NaturalPersonInfoResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NaturalPersonInfoResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CLIENT_REFERENCE_ID = "clientReferenceId";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCE_ID)
  private String clientReferenceId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private OffsetDateTime lastUpdatedDate;

  public static final String SERIALIZED_NAME_DELETION_DATE = "deletionDate";
  @SerializedName(SERIALIZED_NAME_DELETION_DATE)
  private OffsetDateTime deletionDate;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private EGender gender;

  public static final String SERIALIZED_NAME_COUNTRY_BIRTH = "countryBirth";
  @SerializedName(SERIALIZED_NAME_COUNTRY_BIRTH)
  private String countryBirth;

  public static final String SERIALIZED_NAME_COUNTRY_RESIDENCE = "countryResidence";
  @SerializedName(SERIALIZED_NAME_COUNTRY_RESIDENCE)
  private String countryResidence;

  public static final String SERIALIZED_NAME_COUNTRY_MAIN_BUSINESS = "countryMainBusiness";
  @SerializedName(SERIALIZED_NAME_COUNTRY_MAIN_BUSINESS)
  private String countryMainBusiness;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_TWO = "emailTwo";
  @SerializedName(SERIALIZED_NAME_EMAIL_TWO)
  private String emailTwo;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_TWO = "mobilePhoneTwo";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_TWO)
  private String mobilePhoneTwo;

  public static final String SERIALIZED_NAME_AUTOMATICALLY_UPDATE_N_P_RISK = "automaticallyUpdateNPRisk";
  @SerializedName(SERIALIZED_NAME_AUTOMATICALLY_UPDATE_N_P_RISK)
  private Boolean automaticallyUpdateNPRisk;

  public static final String SERIALIZED_NAME_RISK_LEVEL = "riskLevel";
  @SerializedName(SERIALIZED_NAME_RISK_LEVEL)
  private EScore riskLevel;

  public static final String SERIALIZED_NAME_RISK_LEVEL_JUSTIFICATION = "riskLevelJustification";
  @SerializedName(SERIALIZED_NAME_RISK_LEVEL_JUSTIFICATION)
  private String riskLevelJustification;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EStatus status;

  public static final String SERIALIZED_NAME_REJECT_LABELS = "rejectLabels";
  @SerializedName(SERIALIZED_NAME_REJECT_LABELS)
  private List<RejectLabelType> rejectLabels = null;

  public static final String SERIALIZED_NAME_IS_FLAGGED = "isFlagged";
  @SerializedName(SERIALIZED_NAME_IS_FLAGGED)
  private Boolean isFlagged;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_ECONOMIC_PROFILE = "economicProfile";
  @SerializedName(SERIALIZED_NAME_ECONOMIC_PROFILE)
  private NaturalPersonEconomicProfileResponse economicProfile;

  public static final String SERIALIZED_NAME_DOCUMENT_VERIFICATION = "documentVerification";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERIFICATION)
  private NaturalPersonDocumentVerificationResponse documentVerification;

  public static final String SERIALIZED_NAME_ADDRESS_VERIFICATION = "addressVerification";
  @SerializedName(SERIALIZED_NAME_ADDRESS_VERIFICATION)
  private NaturalPersonAddressVerificationResponse addressVerification;

  public static final String SERIALIZED_NAME_FACE_VERIFICATION = "faceVerification";
  @SerializedName(SERIALIZED_NAME_FACE_VERIFICATION)
  private NaturalPersonFaceVerificationResponse faceVerification;

  public static final String SERIALIZED_NAME_SCREENING_VERIFICATION = "screeningVerification";
  @SerializedName(SERIALIZED_NAME_SCREENING_VERIFICATION)
  private NaturalPersonAmlVerificationResponse screeningVerification;

  public static final String SERIALIZED_NAME_OTHER_SOURCES_OF_INCOME = "otherSourcesOfIncome";
  @SerializedName(SERIALIZED_NAME_OTHER_SOURCES_OF_INCOME)
  private List<NaturalPersonOtherSourceOfIncomeResponse> otherSourcesOfIncome = null;

  public static final String SERIALIZED_NAME_OTHER_SOURCES_OF_WEALTH = "otherSourcesOfWealth";
  @SerializedName(SERIALIZED_NAME_OTHER_SOURCES_OF_WEALTH)
  private List<NaturalPersonOtherSourceOfWealthResponse> otherSourcesOfWealth = null;

  public static final String SERIALIZED_NAME_INDUSTRIES = "industries";
  @SerializedName(SERIALIZED_NAME_INDUSTRIES)
  private List<NaturalPersonOccupationResponse> industries = null;

  public NaturalPersonInfoResponse() {
  }

  public NaturalPersonInfoResponse id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public NaturalPersonInfoResponse clientReferenceId(String clientReferenceId) {
    
    
    
    
    this.clientReferenceId = clientReferenceId;
    return this;
  }

   /**
   * Get clientReferenceId
   * @return clientReferenceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientReferenceId() {
    return clientReferenceId;
  }


  public void setClientReferenceId(String clientReferenceId) {
    
    
    
    this.clientReferenceId = clientReferenceId;
  }


  public NaturalPersonInfoResponse creationDate(OffsetDateTime creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public NaturalPersonInfoResponse lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

   /**
   * Get lastUpdatedDate
   * @return lastUpdatedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }


  public void setLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
  }


  public NaturalPersonInfoResponse deletionDate(OffsetDateTime deletionDate) {
    
    
    
    
    this.deletionDate = deletionDate;
    return this;
  }

   /**
   * Get deletionDate
   * @return deletionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDeletionDate() {
    return deletionDate;
  }


  public void setDeletionDate(OffsetDateTime deletionDate) {
    
    
    
    this.deletionDate = deletionDate;
  }


  public NaturalPersonInfoResponse taxId(String taxId) {
    
    
    
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    
    this.taxId = taxId;
  }


  public NaturalPersonInfoResponse firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public NaturalPersonInfoResponse lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public NaturalPersonInfoResponse middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public NaturalPersonInfoResponse legalName(String legalName) {
    
    
    
    
    this.legalName = legalName;
    return this;
  }

   /**
   * Get legalName
   * @return legalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLegalName() {
    return legalName;
  }


  public void setLegalName(String legalName) {
    
    
    
    this.legalName = legalName;
  }


  public NaturalPersonInfoResponse dateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public NaturalPersonInfoResponse gender(EGender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EGender getGender() {
    return gender;
  }


  public void setGender(EGender gender) {
    
    
    
    this.gender = gender;
  }


  public NaturalPersonInfoResponse countryBirth(String countryBirth) {
    
    
    
    
    this.countryBirth = countryBirth;
    return this;
  }

   /**
   * Get countryBirth
   * @return countryBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryBirth() {
    return countryBirth;
  }


  public void setCountryBirth(String countryBirth) {
    
    
    
    this.countryBirth = countryBirth;
  }


  public NaturalPersonInfoResponse countryResidence(String countryResidence) {
    
    
    
    
    this.countryResidence = countryResidence;
    return this;
  }

   /**
   * Get countryResidence
   * @return countryResidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryResidence() {
    return countryResidence;
  }


  public void setCountryResidence(String countryResidence) {
    
    
    
    this.countryResidence = countryResidence;
  }


  public NaturalPersonInfoResponse countryMainBusiness(String countryMainBusiness) {
    
    
    
    
    this.countryMainBusiness = countryMainBusiness;
    return this;
  }

   /**
   * Get countryMainBusiness
   * @return countryMainBusiness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryMainBusiness() {
    return countryMainBusiness;
  }


  public void setCountryMainBusiness(String countryMainBusiness) {
    
    
    
    this.countryMainBusiness = countryMainBusiness;
  }


  public NaturalPersonInfoResponse nationality(String nationality) {
    
    
    
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Get nationality
   * @return nationality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    
    
    
    this.nationality = nationality;
  }


  public NaturalPersonInfoResponse email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public NaturalPersonInfoResponse emailTwo(String emailTwo) {
    
    
    
    
    this.emailTwo = emailTwo;
    return this;
  }

   /**
   * Get emailTwo
   * @return emailTwo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmailTwo() {
    return emailTwo;
  }


  public void setEmailTwo(String emailTwo) {
    
    
    
    this.emailTwo = emailTwo;
  }


  public NaturalPersonInfoResponse mobilePhone(String mobilePhone) {
    
    
    
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Get mobilePhone
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    
    
    
    this.mobilePhone = mobilePhone;
  }


  public NaturalPersonInfoResponse mobilePhoneTwo(String mobilePhoneTwo) {
    
    
    
    
    this.mobilePhoneTwo = mobilePhoneTwo;
    return this;
  }

   /**
   * Get mobilePhoneTwo
   * @return mobilePhoneTwo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMobilePhoneTwo() {
    return mobilePhoneTwo;
  }


  public void setMobilePhoneTwo(String mobilePhoneTwo) {
    
    
    
    this.mobilePhoneTwo = mobilePhoneTwo;
  }


  public NaturalPersonInfoResponse automaticallyUpdateNPRisk(Boolean automaticallyUpdateNPRisk) {
    
    
    
    
    this.automaticallyUpdateNPRisk = automaticallyUpdateNPRisk;
    return this;
  }

   /**
   * Get automaticallyUpdateNPRisk
   * @return automaticallyUpdateNPRisk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAutomaticallyUpdateNPRisk() {
    return automaticallyUpdateNPRisk;
  }


  public void setAutomaticallyUpdateNPRisk(Boolean automaticallyUpdateNPRisk) {
    
    
    
    this.automaticallyUpdateNPRisk = automaticallyUpdateNPRisk;
  }


  public NaturalPersonInfoResponse riskLevel(EScore riskLevel) {
    
    
    
    
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EScore getRiskLevel() {
    return riskLevel;
  }


  public void setRiskLevel(EScore riskLevel) {
    
    
    
    this.riskLevel = riskLevel;
  }


  public NaturalPersonInfoResponse riskLevelJustification(String riskLevelJustification) {
    
    
    
    
    this.riskLevelJustification = riskLevelJustification;
    return this;
  }

   /**
   * Get riskLevelJustification
   * @return riskLevelJustification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRiskLevelJustification() {
    return riskLevelJustification;
  }


  public void setRiskLevelJustification(String riskLevelJustification) {
    
    
    
    this.riskLevelJustification = riskLevelJustification;
  }


  public NaturalPersonInfoResponse status(EStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EStatus getStatus() {
    return status;
  }


  public void setStatus(EStatus status) {
    
    
    
    this.status = status;
  }


  public NaturalPersonInfoResponse rejectLabels(List<RejectLabelType> rejectLabels) {
    
    
    
    
    this.rejectLabels = rejectLabels;
    return this;
  }

  public NaturalPersonInfoResponse addRejectLabelsItem(RejectLabelType rejectLabelsItem) {
    if (this.rejectLabels == null) {
      this.rejectLabels = new ArrayList<>();
    }
    this.rejectLabels.add(rejectLabelsItem);
    return this;
  }

   /**
   * Get rejectLabels
   * @return rejectLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RejectLabelType> getRejectLabels() {
    return rejectLabels;
  }


  public void setRejectLabels(List<RejectLabelType> rejectLabels) {
    
    
    
    this.rejectLabels = rejectLabels;
  }


  public NaturalPersonInfoResponse isFlagged(Boolean isFlagged) {
    
    
    
    
    this.isFlagged = isFlagged;
    return this;
  }

   /**
   * Get isFlagged
   * @return isFlagged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsFlagged() {
    return isFlagged;
  }


  public void setIsFlagged(Boolean isFlagged) {
    
    
    
    this.isFlagged = isFlagged;
  }


  public NaturalPersonInfoResponse comments(String comments) {
    
    
    
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    
    
    
    this.comments = comments;
  }


  public NaturalPersonInfoResponse economicProfile(NaturalPersonEconomicProfileResponse economicProfile) {
    
    
    
    
    this.economicProfile = economicProfile;
    return this;
  }

   /**
   * Get economicProfile
   * @return economicProfile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NaturalPersonEconomicProfileResponse getEconomicProfile() {
    return economicProfile;
  }


  public void setEconomicProfile(NaturalPersonEconomicProfileResponse economicProfile) {
    
    
    
    this.economicProfile = economicProfile;
  }


  public NaturalPersonInfoResponse documentVerification(NaturalPersonDocumentVerificationResponse documentVerification) {
    
    
    
    
    this.documentVerification = documentVerification;
    return this;
  }

   /**
   * Get documentVerification
   * @return documentVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NaturalPersonDocumentVerificationResponse getDocumentVerification() {
    return documentVerification;
  }


  public void setDocumentVerification(NaturalPersonDocumentVerificationResponse documentVerification) {
    
    
    
    this.documentVerification = documentVerification;
  }


  public NaturalPersonInfoResponse addressVerification(NaturalPersonAddressVerificationResponse addressVerification) {
    
    
    
    
    this.addressVerification = addressVerification;
    return this;
  }

   /**
   * Get addressVerification
   * @return addressVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NaturalPersonAddressVerificationResponse getAddressVerification() {
    return addressVerification;
  }


  public void setAddressVerification(NaturalPersonAddressVerificationResponse addressVerification) {
    
    
    
    this.addressVerification = addressVerification;
  }


  public NaturalPersonInfoResponse faceVerification(NaturalPersonFaceVerificationResponse faceVerification) {
    
    
    
    
    this.faceVerification = faceVerification;
    return this;
  }

   /**
   * Get faceVerification
   * @return faceVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NaturalPersonFaceVerificationResponse getFaceVerification() {
    return faceVerification;
  }


  public void setFaceVerification(NaturalPersonFaceVerificationResponse faceVerification) {
    
    
    
    this.faceVerification = faceVerification;
  }


  public NaturalPersonInfoResponse screeningVerification(NaturalPersonAmlVerificationResponse screeningVerification) {
    
    
    
    
    this.screeningVerification = screeningVerification;
    return this;
  }

   /**
   * Get screeningVerification
   * @return screeningVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NaturalPersonAmlVerificationResponse getScreeningVerification() {
    return screeningVerification;
  }


  public void setScreeningVerification(NaturalPersonAmlVerificationResponse screeningVerification) {
    
    
    
    this.screeningVerification = screeningVerification;
  }


  public NaturalPersonInfoResponse otherSourcesOfIncome(List<NaturalPersonOtherSourceOfIncomeResponse> otherSourcesOfIncome) {
    
    
    
    
    this.otherSourcesOfIncome = otherSourcesOfIncome;
    return this;
  }

  public NaturalPersonInfoResponse addOtherSourcesOfIncomeItem(NaturalPersonOtherSourceOfIncomeResponse otherSourcesOfIncomeItem) {
    if (this.otherSourcesOfIncome == null) {
      this.otherSourcesOfIncome = new ArrayList<>();
    }
    this.otherSourcesOfIncome.add(otherSourcesOfIncomeItem);
    return this;
  }

   /**
   * Get otherSourcesOfIncome
   * @return otherSourcesOfIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NaturalPersonOtherSourceOfIncomeResponse> getOtherSourcesOfIncome() {
    return otherSourcesOfIncome;
  }


  public void setOtherSourcesOfIncome(List<NaturalPersonOtherSourceOfIncomeResponse> otherSourcesOfIncome) {
    
    
    
    this.otherSourcesOfIncome = otherSourcesOfIncome;
  }


  public NaturalPersonInfoResponse otherSourcesOfWealth(List<NaturalPersonOtherSourceOfWealthResponse> otherSourcesOfWealth) {
    
    
    
    
    this.otherSourcesOfWealth = otherSourcesOfWealth;
    return this;
  }

  public NaturalPersonInfoResponse addOtherSourcesOfWealthItem(NaturalPersonOtherSourceOfWealthResponse otherSourcesOfWealthItem) {
    if (this.otherSourcesOfWealth == null) {
      this.otherSourcesOfWealth = new ArrayList<>();
    }
    this.otherSourcesOfWealth.add(otherSourcesOfWealthItem);
    return this;
  }

   /**
   * Get otherSourcesOfWealth
   * @return otherSourcesOfWealth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NaturalPersonOtherSourceOfWealthResponse> getOtherSourcesOfWealth() {
    return otherSourcesOfWealth;
  }


  public void setOtherSourcesOfWealth(List<NaturalPersonOtherSourceOfWealthResponse> otherSourcesOfWealth) {
    
    
    
    this.otherSourcesOfWealth = otherSourcesOfWealth;
  }


  public NaturalPersonInfoResponse industries(List<NaturalPersonOccupationResponse> industries) {
    
    
    
    
    this.industries = industries;
    return this;
  }

  public NaturalPersonInfoResponse addIndustriesItem(NaturalPersonOccupationResponse industriesItem) {
    if (this.industries == null) {
      this.industries = new ArrayList<>();
    }
    this.industries.add(industriesItem);
    return this;
  }

   /**
   * Get industries
   * @return industries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NaturalPersonOccupationResponse> getIndustries() {
    return industries;
  }


  public void setIndustries(List<NaturalPersonOccupationResponse> industries) {
    
    
    
    this.industries = industries;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NaturalPersonInfoResponse instance itself
   */
  public NaturalPersonInfoResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NaturalPersonInfoResponse naturalPersonInfoResponse = (NaturalPersonInfoResponse) o;
    return Objects.equals(this.id, naturalPersonInfoResponse.id) &&
        Objects.equals(this.clientReferenceId, naturalPersonInfoResponse.clientReferenceId) &&
        Objects.equals(this.creationDate, naturalPersonInfoResponse.creationDate) &&
        Objects.equals(this.lastUpdatedDate, naturalPersonInfoResponse.lastUpdatedDate) &&
        Objects.equals(this.deletionDate, naturalPersonInfoResponse.deletionDate) &&
        Objects.equals(this.taxId, naturalPersonInfoResponse.taxId) &&
        Objects.equals(this.firstName, naturalPersonInfoResponse.firstName) &&
        Objects.equals(this.lastName, naturalPersonInfoResponse.lastName) &&
        Objects.equals(this.middleName, naturalPersonInfoResponse.middleName) &&
        Objects.equals(this.legalName, naturalPersonInfoResponse.legalName) &&
        Objects.equals(this.dateOfBirth, naturalPersonInfoResponse.dateOfBirth) &&
        Objects.equals(this.gender, naturalPersonInfoResponse.gender) &&
        Objects.equals(this.countryBirth, naturalPersonInfoResponse.countryBirth) &&
        Objects.equals(this.countryResidence, naturalPersonInfoResponse.countryResidence) &&
        Objects.equals(this.countryMainBusiness, naturalPersonInfoResponse.countryMainBusiness) &&
        Objects.equals(this.nationality, naturalPersonInfoResponse.nationality) &&
        Objects.equals(this.email, naturalPersonInfoResponse.email) &&
        Objects.equals(this.emailTwo, naturalPersonInfoResponse.emailTwo) &&
        Objects.equals(this.mobilePhone, naturalPersonInfoResponse.mobilePhone) &&
        Objects.equals(this.mobilePhoneTwo, naturalPersonInfoResponse.mobilePhoneTwo) &&
        Objects.equals(this.automaticallyUpdateNPRisk, naturalPersonInfoResponse.automaticallyUpdateNPRisk) &&
        Objects.equals(this.riskLevel, naturalPersonInfoResponse.riskLevel) &&
        Objects.equals(this.riskLevelJustification, naturalPersonInfoResponse.riskLevelJustification) &&
        Objects.equals(this.status, naturalPersonInfoResponse.status) &&
        Objects.equals(this.rejectLabels, naturalPersonInfoResponse.rejectLabels) &&
        Objects.equals(this.isFlagged, naturalPersonInfoResponse.isFlagged) &&
        Objects.equals(this.comments, naturalPersonInfoResponse.comments) &&
        Objects.equals(this.economicProfile, naturalPersonInfoResponse.economicProfile) &&
        Objects.equals(this.documentVerification, naturalPersonInfoResponse.documentVerification) &&
        Objects.equals(this.addressVerification, naturalPersonInfoResponse.addressVerification) &&
        Objects.equals(this.faceVerification, naturalPersonInfoResponse.faceVerification) &&
        Objects.equals(this.screeningVerification, naturalPersonInfoResponse.screeningVerification) &&
        Objects.equals(this.otherSourcesOfIncome, naturalPersonInfoResponse.otherSourcesOfIncome) &&
        Objects.equals(this.otherSourcesOfWealth, naturalPersonInfoResponse.otherSourcesOfWealth) &&
        Objects.equals(this.industries, naturalPersonInfoResponse.industries)&&
        Objects.equals(this.additionalProperties, naturalPersonInfoResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, clientReferenceId, creationDate, lastUpdatedDate, deletionDate, taxId, firstName, lastName, middleName, legalName, dateOfBirth, gender, countryBirth, countryResidence, countryMainBusiness, nationality, email, emailTwo, mobilePhone, mobilePhoneTwo, automaticallyUpdateNPRisk, riskLevel, riskLevelJustification, status, rejectLabels, isFlagged, comments, economicProfile, documentVerification, addressVerification, faceVerification, screeningVerification, otherSourcesOfIncome, otherSourcesOfWealth, industries, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NaturalPersonInfoResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    clientReferenceId: ").append(toIndentedString(clientReferenceId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    deletionDate: ").append(toIndentedString(deletionDate)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    countryBirth: ").append(toIndentedString(countryBirth)).append("\n");
    sb.append("    countryResidence: ").append(toIndentedString(countryResidence)).append("\n");
    sb.append("    countryMainBusiness: ").append(toIndentedString(countryMainBusiness)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailTwo: ").append(toIndentedString(emailTwo)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    mobilePhoneTwo: ").append(toIndentedString(mobilePhoneTwo)).append("\n");
    sb.append("    automaticallyUpdateNPRisk: ").append(toIndentedString(automaticallyUpdateNPRisk)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    riskLevelJustification: ").append(toIndentedString(riskLevelJustification)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    rejectLabels: ").append(toIndentedString(rejectLabels)).append("\n");
    sb.append("    isFlagged: ").append(toIndentedString(isFlagged)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    economicProfile: ").append(toIndentedString(economicProfile)).append("\n");
    sb.append("    documentVerification: ").append(toIndentedString(documentVerification)).append("\n");
    sb.append("    addressVerification: ").append(toIndentedString(addressVerification)).append("\n");
    sb.append("    faceVerification: ").append(toIndentedString(faceVerification)).append("\n");
    sb.append("    screeningVerification: ").append(toIndentedString(screeningVerification)).append("\n");
    sb.append("    otherSourcesOfIncome: ").append(toIndentedString(otherSourcesOfIncome)).append("\n");
    sb.append("    otherSourcesOfWealth: ").append(toIndentedString(otherSourcesOfWealth)).append("\n");
    sb.append("    industries: ").append(toIndentedString(industries)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("clientReferenceId");
    openapiFields.add("creationDate");
    openapiFields.add("lastUpdatedDate");
    openapiFields.add("deletionDate");
    openapiFields.add("taxId");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("legalName");
    openapiFields.add("dateOfBirth");
    openapiFields.add("gender");
    openapiFields.add("countryBirth");
    openapiFields.add("countryResidence");
    openapiFields.add("countryMainBusiness");
    openapiFields.add("nationality");
    openapiFields.add("email");
    openapiFields.add("emailTwo");
    openapiFields.add("mobilePhone");
    openapiFields.add("mobilePhoneTwo");
    openapiFields.add("automaticallyUpdateNPRisk");
    openapiFields.add("riskLevel");
    openapiFields.add("riskLevelJustification");
    openapiFields.add("status");
    openapiFields.add("rejectLabels");
    openapiFields.add("isFlagged");
    openapiFields.add("comments");
    openapiFields.add("economicProfile");
    openapiFields.add("documentVerification");
    openapiFields.add("addressVerification");
    openapiFields.add("faceVerification");
    openapiFields.add("screeningVerification");
    openapiFields.add("otherSourcesOfIncome");
    openapiFields.add("otherSourcesOfWealth");
    openapiFields.add("industries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NaturalPersonInfoResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NaturalPersonInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NaturalPersonInfoResponse is not found in the empty JSON string", NaturalPersonInfoResponse.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("clientReferenceId").isJsonNull() && (jsonObj.get("clientReferenceId") != null && !jsonObj.get("clientReferenceId").isJsonNull()) && !jsonObj.get("clientReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientReferenceId").toString()));
      }
      if (!jsonObj.get("taxId").isJsonNull() && (jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && (jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("legalName").isJsonNull() && (jsonObj.get("legalName") != null && !jsonObj.get("legalName").isJsonNull()) && !jsonObj.get("legalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalName").toString()));
      }
      if (!jsonObj.get("countryBirth").isJsonNull() && (jsonObj.get("countryBirth") != null && !jsonObj.get("countryBirth").isJsonNull()) && !jsonObj.get("countryBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryBirth").toString()));
      }
      if (!jsonObj.get("countryResidence").isJsonNull() && (jsonObj.get("countryResidence") != null && !jsonObj.get("countryResidence").isJsonNull()) && !jsonObj.get("countryResidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryResidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryResidence").toString()));
      }
      if (!jsonObj.get("countryMainBusiness").isJsonNull() && (jsonObj.get("countryMainBusiness") != null && !jsonObj.get("countryMainBusiness").isJsonNull()) && !jsonObj.get("countryMainBusiness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryMainBusiness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryMainBusiness").toString()));
      }
      if (!jsonObj.get("nationality").isJsonNull() && (jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if (!jsonObj.get("email").isJsonNull() && (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("emailTwo").isJsonNull() && (jsonObj.get("emailTwo") != null && !jsonObj.get("emailTwo").isJsonNull()) && !jsonObj.get("emailTwo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailTwo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailTwo").toString()));
      }
      if (!jsonObj.get("mobilePhone").isJsonNull() && (jsonObj.get("mobilePhone") != null && !jsonObj.get("mobilePhone").isJsonNull()) && !jsonObj.get("mobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhone").toString()));
      }
      if (!jsonObj.get("mobilePhoneTwo").isJsonNull() && (jsonObj.get("mobilePhoneTwo") != null && !jsonObj.get("mobilePhoneTwo").isJsonNull()) && !jsonObj.get("mobilePhoneTwo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneTwo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneTwo").toString()));
      }
      if (!jsonObj.get("riskLevelJustification").isJsonNull() && (jsonObj.get("riskLevelJustification") != null && !jsonObj.get("riskLevelJustification").isJsonNull()) && !jsonObj.get("riskLevelJustification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `riskLevelJustification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("riskLevelJustification").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("rejectLabels") != null && !jsonObj.get("rejectLabels").isJsonNull() && !jsonObj.get("rejectLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectLabels` to be an array in the JSON string or null but got `%s`", jsonObj.get("rejectLabels").toString()));
      }
      if (!jsonObj.get("comments").isJsonNull() && (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // validate the optional field `economicProfile`
      if (jsonObj.get("economicProfile") != null && !jsonObj.get("economicProfile").isJsonNull()) {
        NaturalPersonEconomicProfileResponse.validateJsonObject(jsonObj.getAsJsonObject("economicProfile"));
      }
      // validate the optional field `documentVerification`
      if (jsonObj.get("documentVerification") != null && !jsonObj.get("documentVerification").isJsonNull()) {
        NaturalPersonDocumentVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("documentVerification"));
      }
      // validate the optional field `addressVerification`
      if (jsonObj.get("addressVerification") != null && !jsonObj.get("addressVerification").isJsonNull()) {
        NaturalPersonAddressVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("addressVerification"));
      }
      // validate the optional field `faceVerification`
      if (jsonObj.get("faceVerification") != null && !jsonObj.get("faceVerification").isJsonNull()) {
        NaturalPersonFaceVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("faceVerification"));
      }
      // validate the optional field `screeningVerification`
      if (jsonObj.get("screeningVerification") != null && !jsonObj.get("screeningVerification").isJsonNull()) {
        NaturalPersonAmlVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("screeningVerification"));
      }
      if (jsonObj.get("otherSourcesOfIncome") != null && !jsonObj.get("otherSourcesOfIncome").isJsonNull()) {
        JsonArray jsonArrayotherSourcesOfIncome = jsonObj.getAsJsonArray("otherSourcesOfIncome");
        if (jsonArrayotherSourcesOfIncome != null) {
          // ensure the json data is an array
          if (!jsonObj.get("otherSourcesOfIncome").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `otherSourcesOfIncome` to be an array in the JSON string but got `%s`", jsonObj.get("otherSourcesOfIncome").toString()));
          }

          // validate the optional field `otherSourcesOfIncome` (array)
          for (int i = 0; i < jsonArrayotherSourcesOfIncome.size(); i++) {
            NaturalPersonOtherSourceOfIncomeResponse.validateJsonObject(jsonArrayotherSourcesOfIncome.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("otherSourcesOfWealth") != null && !jsonObj.get("otherSourcesOfWealth").isJsonNull()) {
        JsonArray jsonArrayotherSourcesOfWealth = jsonObj.getAsJsonArray("otherSourcesOfWealth");
        if (jsonArrayotherSourcesOfWealth != null) {
          // ensure the json data is an array
          if (!jsonObj.get("otherSourcesOfWealth").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `otherSourcesOfWealth` to be an array in the JSON string but got `%s`", jsonObj.get("otherSourcesOfWealth").toString()));
          }

          // validate the optional field `otherSourcesOfWealth` (array)
          for (int i = 0; i < jsonArrayotherSourcesOfWealth.size(); i++) {
            NaturalPersonOtherSourceOfWealthResponse.validateJsonObject(jsonArrayotherSourcesOfWealth.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("industries") != null && !jsonObj.get("industries").isJsonNull()) {
        JsonArray jsonArrayindustries = jsonObj.getAsJsonArray("industries");
        if (jsonArrayindustries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("industries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `industries` to be an array in the JSON string but got `%s`", jsonObj.get("industries").toString()));
          }

          // validate the optional field `industries` (array)
          for (int i = 0; i < jsonArrayindustries.size(); i++) {
            NaturalPersonOccupationResponse.validateJsonObject(jsonArrayindustries.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NaturalPersonInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NaturalPersonInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NaturalPersonInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NaturalPersonInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<NaturalPersonInfoResponse>() {
           @Override
           public void write(JsonWriter out, NaturalPersonInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NaturalPersonInfoResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NaturalPersonInfoResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NaturalPersonInfoResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NaturalPersonInfoResponse
  * @throws IOException if the JSON string is invalid with respect to NaturalPersonInfoResponse
  */
  public static NaturalPersonInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NaturalPersonInfoResponse.class);
  }

 /**
  * Convert an instance of NaturalPersonInfoResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


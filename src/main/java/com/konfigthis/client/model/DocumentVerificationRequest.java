/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DocumentVerificationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DocumentVerificationRequest {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_ADDITIONAL_DOCUMENT = "additionalDocument";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DOCUMENT)
  private String additionalDocument;

  public static final String SERIALIZED_NAME_FACE = "face";
  @SerializedName(SERIALIZED_NAME_FACE)
  private String face;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_NATURAL_PERSON_ID = "naturalPersonId";
  @SerializedName(SERIALIZED_NAME_NATURAL_PERSON_ID)
  private Long naturalPersonId;

  public DocumentVerificationRequest() {
  }

  public DocumentVerificationRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public DocumentVerificationRequest country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public DocumentVerificationRequest document(String document) {
    
    
    
    
    this.document = document;
    return this;
  }

   /**
   * Get document
   * @return document
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocument() {
    return document;
  }


  public void setDocument(String document) {
    
    
    
    this.document = document;
  }


  public DocumentVerificationRequest additionalDocument(String additionalDocument) {
    
    
    
    
    this.additionalDocument = additionalDocument;
    return this;
  }

   /**
   * Get additionalDocument
   * @return additionalDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalDocument() {
    return additionalDocument;
  }


  public void setAdditionalDocument(String additionalDocument) {
    
    
    
    this.additionalDocument = additionalDocument;
  }


  public DocumentVerificationRequest face(String face) {
    
    
    
    
    this.face = face;
    return this;
  }

   /**
   * Get face
   * @return face
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFace() {
    return face;
  }


  public void setFace(String face) {
    
    
    
    this.face = face;
  }


  public DocumentVerificationRequest documentType(String documentType) {
    
    
    
    
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentType() {
    return documentType;
  }


  public void setDocumentType(String documentType) {
    
    
    
    this.documentType = documentType;
  }


  public DocumentVerificationRequest naturalPersonId(Long naturalPersonId) {
    
    
    
    
    this.naturalPersonId = naturalPersonId;
    return this;
  }

   /**
   * Get naturalPersonId
   * @return naturalPersonId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getNaturalPersonId() {
    return naturalPersonId;
  }


  public void setNaturalPersonId(Long naturalPersonId) {
    
    
    
    this.naturalPersonId = naturalPersonId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DocumentVerificationRequest instance itself
   */
  public DocumentVerificationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentVerificationRequest documentVerificationRequest = (DocumentVerificationRequest) o;
    return Objects.equals(this.email, documentVerificationRequest.email) &&
        Objects.equals(this.country, documentVerificationRequest.country) &&
        Objects.equals(this.document, documentVerificationRequest.document) &&
        Objects.equals(this.additionalDocument, documentVerificationRequest.additionalDocument) &&
        Objects.equals(this.face, documentVerificationRequest.face) &&
        Objects.equals(this.documentType, documentVerificationRequest.documentType) &&
        Objects.equals(this.naturalPersonId, documentVerificationRequest.naturalPersonId)&&
        Objects.equals(this.additionalProperties, documentVerificationRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, country, document, additionalDocument, face, documentType, naturalPersonId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentVerificationRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    additionalDocument: ").append(toIndentedString(additionalDocument)).append("\n");
    sb.append("    face: ").append(toIndentedString(face)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    naturalPersonId: ").append(toIndentedString(naturalPersonId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("country");
    openapiFields.add("document");
    openapiFields.add("additionalDocument");
    openapiFields.add("face");
    openapiFields.add("documentType");
    openapiFields.add("naturalPersonId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentVerificationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DocumentVerificationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentVerificationRequest is not found in the empty JSON string", DocumentVerificationRequest.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("email").isJsonNull() && (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("country").isJsonNull() && (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("document").isJsonNull() && (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) && !jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if (!jsonObj.get("additionalDocument").isJsonNull() && (jsonObj.get("additionalDocument") != null && !jsonObj.get("additionalDocument").isJsonNull()) && !jsonObj.get("additionalDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalDocument").toString()));
      }
      if (!jsonObj.get("face").isJsonNull() && (jsonObj.get("face") != null && !jsonObj.get("face").isJsonNull()) && !jsonObj.get("face").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `face` to be a primitive type in the JSON string but got `%s`", jsonObj.get("face").toString()));
      }
      if (!jsonObj.get("documentType").isJsonNull() && (jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentVerificationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentVerificationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentVerificationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentVerificationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentVerificationRequest>() {
           @Override
           public void write(JsonWriter out, DocumentVerificationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentVerificationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DocumentVerificationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentVerificationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentVerificationRequest
  * @throws IOException if the JSON string is invalid with respect to DocumentVerificationRequest
  */
  public static DocumentVerificationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentVerificationRequest.class);
  }

 /**
  * Convert an instance of DocumentVerificationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


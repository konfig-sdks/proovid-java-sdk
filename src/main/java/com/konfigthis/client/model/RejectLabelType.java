/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets RejectLabelType
 */
@JsonAdapter(RejectLabelType.Adapter.class)public enum RejectLabelType {
  
  NUMBER_0(0),
  
  NUMBER_1(1),
  
  NUMBER_2(2),
  
  NUMBER_3(3),
  
  NUMBER_4(4),
  
  NUMBER_5(5),
  
  NUMBER_6(6),
  
  NUMBER_7(7),
  
  NUMBER_8(8),
  
  NUMBER_9(9),
  
  NUMBER_10(10),
  
  NUMBER_11(11),
  
  NUMBER_12(12),
  
  NUMBER_13(13),
  
  NUMBER_14(14),
  
  NUMBER_15(15),
  
  NUMBER_16(16),
  
  NUMBER_17(17),
  
  NUMBER_18(18),
  
  NUMBER_19(19),
  
  NUMBER_20(20),
  
  NUMBER_21(21),
  
  NUMBER_22(22),
  
  NUMBER_23(23),
  
  NUMBER_24(24),
  
  NUMBER_25(25),
  
  NUMBER_26(26),
  
  NUMBER_27(27),
  
  NUMBER_28(28),
  
  NUMBER_29(29),
  
  NUMBER_30(30),
  
  NUMBER_31(31),
  
  NUMBER_32(32),
  
  NUMBER_33(33),
  
  NUMBER_34(34),
  
  NUMBER_35(35),
  
  NUMBER_36(36),
  
  NUMBER_37(37),
  
  NUMBER_38(38),
  
  NUMBER_39(39),
  
  NUMBER_40(40),
  
  NUMBER_41(41),
  
  NUMBER_42(42),
  
  NUMBER_43(43),
  
  NUMBER_44(44),
  
  NUMBER_45(45),
  
  NUMBER_46(46),
  
  NUMBER_47(47),
  
  NUMBER_48(48),
  
  NUMBER_49(49),
  
  NUMBER_50(50),
  
  NUMBER_51(51),
  
  NUMBER_52(52),
  
  NUMBER_53(53),
  
  NUMBER_54(54);

  private Integer value;

  RejectLabelType(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RejectLabelType fromValue(Integer value) {
    for (RejectLabelType b : RejectLabelType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RejectLabelType> {
    @Override
    public void write(final JsonWriter jsonWriter, final RejectLabelType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RejectLabelType read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return RejectLabelType.fromValue(value);
    }
  }
}


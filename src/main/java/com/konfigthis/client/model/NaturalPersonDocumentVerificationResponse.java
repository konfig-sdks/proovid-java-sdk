/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EGender;
import com.konfigthis.client.model.EStatus;
import com.konfigthis.client.model.RejectLabelType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NaturalPersonDocumentVerificationResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NaturalPersonDocumentVerificationResponse {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EStatus status;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_REJECT_LABELS = "rejectLabels";
  @SerializedName(SERIALIZED_NAME_REJECT_LABELS)
  private List<RejectLabelType> rejectLabels = null;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private EGender gender;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ISSUED_DATE = "issuedDate";
  @SerializedName(SERIALIZED_NAME_ISSUED_DATE)
  private OffsetDateTime issuedDate;

  public static final String SERIALIZED_NAME_ISSUE_AUTHORITY = "issueAuthority";
  @SerializedName(SERIALIZED_NAME_ISSUE_AUTHORITY)
  private String issueAuthority;

  public static final String SERIALIZED_NAME_FIRST_ISSUED_DATE = "firstIssuedDate";
  @SerializedName(SERIALIZED_NAME_FIRST_ISSUED_DATE)
  private OffsetDateTime firstIssuedDate;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "validUntil";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  private OffsetDateTime validUntil;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_ADDITIONAL_NUMBER = "additionalNumber";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NUMBER)
  private String additionalNumber;

  public static final String SERIALIZED_NAME_MRZ_LINE1 = "mrzLine1";
  @SerializedName(SERIALIZED_NAME_MRZ_LINE1)
  private String mrzLine1;

  public static final String SERIALIZED_NAME_MRZ_LINE2 = "mrzLine2";
  @SerializedName(SERIALIZED_NAME_MRZ_LINE2)
  private String mrzLine2;

  public static final String SERIALIZED_NAME_MRZ_LINE3 = "mrzLine3";
  @SerializedName(SERIALIZED_NAME_MRZ_LINE3)
  private String mrzLine3;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_ADDITIONAL_IMAGE_ID = "additionalImageId";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IMAGE_ID)
  private String additionalImageId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private OffsetDateTime lastUpdatedDate;

  public NaturalPersonDocumentVerificationResponse() {
  }

  public NaturalPersonDocumentVerificationResponse status(EStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EStatus getStatus() {
    return status;
  }


  public void setStatus(EStatus status) {
    
    
    
    this.status = status;
  }


  public NaturalPersonDocumentVerificationResponse comment(String comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    
    
    
    this.comment = comment;
  }


  public NaturalPersonDocumentVerificationResponse rejectLabels(List<RejectLabelType> rejectLabels) {
    
    
    
    
    this.rejectLabels = rejectLabels;
    return this;
  }

  public NaturalPersonDocumentVerificationResponse addRejectLabelsItem(RejectLabelType rejectLabelsItem) {
    if (this.rejectLabels == null) {
      this.rejectLabels = new ArrayList<>();
    }
    this.rejectLabels.add(rejectLabelsItem);
    return this;
  }

   /**
   * Get rejectLabels
   * @return rejectLabels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RejectLabelType> getRejectLabels() {
    return rejectLabels;
  }


  public void setRejectLabels(List<RejectLabelType> rejectLabels) {
    
    
    
    this.rejectLabels = rejectLabels;
  }


  public NaturalPersonDocumentVerificationResponse firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public NaturalPersonDocumentVerificationResponse lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public NaturalPersonDocumentVerificationResponse dateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public NaturalPersonDocumentVerificationResponse gender(EGender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EGender getGender() {
    return gender;
  }


  public void setGender(EGender gender) {
    
    
    
    this.gender = gender;
  }


  public NaturalPersonDocumentVerificationResponse country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public NaturalPersonDocumentVerificationResponse issuedDate(OffsetDateTime issuedDate) {
    
    
    
    
    this.issuedDate = issuedDate;
    return this;
  }

   /**
   * Get issuedDate
   * @return issuedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getIssuedDate() {
    return issuedDate;
  }


  public void setIssuedDate(OffsetDateTime issuedDate) {
    
    
    
    this.issuedDate = issuedDate;
  }


  public NaturalPersonDocumentVerificationResponse issueAuthority(String issueAuthority) {
    
    
    
    
    this.issueAuthority = issueAuthority;
    return this;
  }

   /**
   * Get issueAuthority
   * @return issueAuthority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIssueAuthority() {
    return issueAuthority;
  }


  public void setIssueAuthority(String issueAuthority) {
    
    
    
    this.issueAuthority = issueAuthority;
  }


  public NaturalPersonDocumentVerificationResponse firstIssuedDate(OffsetDateTime firstIssuedDate) {
    
    
    
    
    this.firstIssuedDate = firstIssuedDate;
    return this;
  }

   /**
   * Get firstIssuedDate
   * @return firstIssuedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getFirstIssuedDate() {
    return firstIssuedDate;
  }


  public void setFirstIssuedDate(OffsetDateTime firstIssuedDate) {
    
    
    
    this.firstIssuedDate = firstIssuedDate;
  }


  public NaturalPersonDocumentVerificationResponse validUntil(OffsetDateTime validUntil) {
    
    
    
    
    this.validUntil = validUntil;
    return this;
  }

   /**
   * Get validUntil
   * @return validUntil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getValidUntil() {
    return validUntil;
  }


  public void setValidUntil(OffsetDateTime validUntil) {
    
    
    
    this.validUntil = validUntil;
  }


  public NaturalPersonDocumentVerificationResponse number(String number) {
    
    
    
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    
    
    
    this.number = number;
  }


  public NaturalPersonDocumentVerificationResponse additionalNumber(String additionalNumber) {
    
    
    
    
    this.additionalNumber = additionalNumber;
    return this;
  }

   /**
   * Get additionalNumber
   * @return additionalNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalNumber() {
    return additionalNumber;
  }


  public void setAdditionalNumber(String additionalNumber) {
    
    
    
    this.additionalNumber = additionalNumber;
  }


  public NaturalPersonDocumentVerificationResponse mrzLine1(String mrzLine1) {
    
    
    
    
    this.mrzLine1 = mrzLine1;
    return this;
  }

   /**
   * Get mrzLine1
   * @return mrzLine1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMrzLine1() {
    return mrzLine1;
  }


  public void setMrzLine1(String mrzLine1) {
    
    
    
    this.mrzLine1 = mrzLine1;
  }


  public NaturalPersonDocumentVerificationResponse mrzLine2(String mrzLine2) {
    
    
    
    
    this.mrzLine2 = mrzLine2;
    return this;
  }

   /**
   * Get mrzLine2
   * @return mrzLine2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMrzLine2() {
    return mrzLine2;
  }


  public void setMrzLine2(String mrzLine2) {
    
    
    
    this.mrzLine2 = mrzLine2;
  }


  public NaturalPersonDocumentVerificationResponse mrzLine3(String mrzLine3) {
    
    
    
    
    this.mrzLine3 = mrzLine3;
    return this;
  }

   /**
   * Get mrzLine3
   * @return mrzLine3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMrzLine3() {
    return mrzLine3;
  }


  public void setMrzLine3(String mrzLine3) {
    
    
    
    this.mrzLine3 = mrzLine3;
  }


  public NaturalPersonDocumentVerificationResponse imageId(String imageId) {
    
    
    
    
    this.imageId = imageId;
    return this;
  }

   /**
   * Get imageId
   * @return imageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageId() {
    return imageId;
  }


  public void setImageId(String imageId) {
    
    
    
    this.imageId = imageId;
  }


  public NaturalPersonDocumentVerificationResponse additionalImageId(String additionalImageId) {
    
    
    
    
    this.additionalImageId = additionalImageId;
    return this;
  }

   /**
   * Get additionalImageId
   * @return additionalImageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalImageId() {
    return additionalImageId;
  }


  public void setAdditionalImageId(String additionalImageId) {
    
    
    
    this.additionalImageId = additionalImageId;
  }


  public NaturalPersonDocumentVerificationResponse creationDate(OffsetDateTime creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public NaturalPersonDocumentVerificationResponse lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

   /**
   * Get lastUpdatedDate
   * @return lastUpdatedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }


  public void setLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    
    
    
    this.lastUpdatedDate = lastUpdatedDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NaturalPersonDocumentVerificationResponse instance itself
   */
  public NaturalPersonDocumentVerificationResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NaturalPersonDocumentVerificationResponse naturalPersonDocumentVerificationResponse = (NaturalPersonDocumentVerificationResponse) o;
    return Objects.equals(this.status, naturalPersonDocumentVerificationResponse.status) &&
        Objects.equals(this.comment, naturalPersonDocumentVerificationResponse.comment) &&
        Objects.equals(this.rejectLabels, naturalPersonDocumentVerificationResponse.rejectLabels) &&
        Objects.equals(this.firstName, naturalPersonDocumentVerificationResponse.firstName) &&
        Objects.equals(this.lastName, naturalPersonDocumentVerificationResponse.lastName) &&
        Objects.equals(this.dateOfBirth, naturalPersonDocumentVerificationResponse.dateOfBirth) &&
        Objects.equals(this.gender, naturalPersonDocumentVerificationResponse.gender) &&
        Objects.equals(this.country, naturalPersonDocumentVerificationResponse.country) &&
        Objects.equals(this.issuedDate, naturalPersonDocumentVerificationResponse.issuedDate) &&
        Objects.equals(this.issueAuthority, naturalPersonDocumentVerificationResponse.issueAuthority) &&
        Objects.equals(this.firstIssuedDate, naturalPersonDocumentVerificationResponse.firstIssuedDate) &&
        Objects.equals(this.validUntil, naturalPersonDocumentVerificationResponse.validUntil) &&
        Objects.equals(this.number, naturalPersonDocumentVerificationResponse.number) &&
        Objects.equals(this.additionalNumber, naturalPersonDocumentVerificationResponse.additionalNumber) &&
        Objects.equals(this.mrzLine1, naturalPersonDocumentVerificationResponse.mrzLine1) &&
        Objects.equals(this.mrzLine2, naturalPersonDocumentVerificationResponse.mrzLine2) &&
        Objects.equals(this.mrzLine3, naturalPersonDocumentVerificationResponse.mrzLine3) &&
        Objects.equals(this.imageId, naturalPersonDocumentVerificationResponse.imageId) &&
        Objects.equals(this.additionalImageId, naturalPersonDocumentVerificationResponse.additionalImageId) &&
        Objects.equals(this.creationDate, naturalPersonDocumentVerificationResponse.creationDate) &&
        Objects.equals(this.lastUpdatedDate, naturalPersonDocumentVerificationResponse.lastUpdatedDate)&&
        Objects.equals(this.additionalProperties, naturalPersonDocumentVerificationResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, comment, rejectLabels, firstName, lastName, dateOfBirth, gender, country, issuedDate, issueAuthority, firstIssuedDate, validUntil, number, additionalNumber, mrzLine1, mrzLine2, mrzLine3, imageId, additionalImageId, creationDate, lastUpdatedDate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NaturalPersonDocumentVerificationResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    rejectLabels: ").append(toIndentedString(rejectLabels)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    issuedDate: ").append(toIndentedString(issuedDate)).append("\n");
    sb.append("    issueAuthority: ").append(toIndentedString(issueAuthority)).append("\n");
    sb.append("    firstIssuedDate: ").append(toIndentedString(firstIssuedDate)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    additionalNumber: ").append(toIndentedString(additionalNumber)).append("\n");
    sb.append("    mrzLine1: ").append(toIndentedString(mrzLine1)).append("\n");
    sb.append("    mrzLine2: ").append(toIndentedString(mrzLine2)).append("\n");
    sb.append("    mrzLine3: ").append(toIndentedString(mrzLine3)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    additionalImageId: ").append(toIndentedString(additionalImageId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("comment");
    openapiFields.add("rejectLabels");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("dateOfBirth");
    openapiFields.add("gender");
    openapiFields.add("country");
    openapiFields.add("issuedDate");
    openapiFields.add("issueAuthority");
    openapiFields.add("firstIssuedDate");
    openapiFields.add("validUntil");
    openapiFields.add("number");
    openapiFields.add("additionalNumber");
    openapiFields.add("mrzLine1");
    openapiFields.add("mrzLine2");
    openapiFields.add("mrzLine3");
    openapiFields.add("imageId");
    openapiFields.add("additionalImageId");
    openapiFields.add("creationDate");
    openapiFields.add("lastUpdatedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NaturalPersonDocumentVerificationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NaturalPersonDocumentVerificationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NaturalPersonDocumentVerificationResponse is not found in the empty JSON string", NaturalPersonDocumentVerificationResponse.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("comment").isJsonNull() && (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("rejectLabels") != null && !jsonObj.get("rejectLabels").isJsonNull() && !jsonObj.get("rejectLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectLabels` to be an array in the JSON string or null but got `%s`", jsonObj.get("rejectLabels").toString()));
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("country").isJsonNull() && (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("issueAuthority").isJsonNull() && (jsonObj.get("issueAuthority") != null && !jsonObj.get("issueAuthority").isJsonNull()) && !jsonObj.get("issueAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueAuthority").toString()));
      }
      if (!jsonObj.get("number").isJsonNull() && (jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("additionalNumber").isJsonNull() && (jsonObj.get("additionalNumber") != null && !jsonObj.get("additionalNumber").isJsonNull()) && !jsonObj.get("additionalNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNumber").toString()));
      }
      if (!jsonObj.get("mrzLine1").isJsonNull() && (jsonObj.get("mrzLine1") != null && !jsonObj.get("mrzLine1").isJsonNull()) && !jsonObj.get("mrzLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mrzLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mrzLine1").toString()));
      }
      if (!jsonObj.get("mrzLine2").isJsonNull() && (jsonObj.get("mrzLine2") != null && !jsonObj.get("mrzLine2").isJsonNull()) && !jsonObj.get("mrzLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mrzLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mrzLine2").toString()));
      }
      if (!jsonObj.get("mrzLine3").isJsonNull() && (jsonObj.get("mrzLine3") != null && !jsonObj.get("mrzLine3").isJsonNull()) && !jsonObj.get("mrzLine3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mrzLine3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mrzLine3").toString()));
      }
      if (!jsonObj.get("imageId").isJsonNull() && (jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) && !jsonObj.get("imageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageId").toString()));
      }
      if (!jsonObj.get("additionalImageId").isJsonNull() && (jsonObj.get("additionalImageId") != null && !jsonObj.get("additionalImageId").isJsonNull()) && !jsonObj.get("additionalImageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalImageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalImageId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NaturalPersonDocumentVerificationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NaturalPersonDocumentVerificationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NaturalPersonDocumentVerificationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NaturalPersonDocumentVerificationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<NaturalPersonDocumentVerificationResponse>() {
           @Override
           public void write(JsonWriter out, NaturalPersonDocumentVerificationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NaturalPersonDocumentVerificationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NaturalPersonDocumentVerificationResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NaturalPersonDocumentVerificationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NaturalPersonDocumentVerificationResponse
  * @throws IOException if the JSON string is invalid with respect to NaturalPersonDocumentVerificationResponse
  */
  public static NaturalPersonDocumentVerificationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NaturalPersonDocumentVerificationResponse.class);
  }

 /**
  * Convert an instance of NaturalPersonDocumentVerificationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NaturalPerson
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NaturalPerson {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SYSTEM_ID = "systemId";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
  private Integer systemId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_COUNTRY_ORIGIN = "countryOrigin";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ORIGIN)
  private String countryOrigin;

  public static final String SERIALIZED_NAME_COUNTRY_RESIDENCE = "countryResidence";
  @SerializedName(SERIALIZED_NAME_COUNTRY_RESIDENCE)
  private String countryResidence;

  public static final String SERIALIZED_NAME_COUNTRY_MAIN_FUNDS = "countryMainFunds";
  @SerializedName(SERIALIZED_NAME_COUNTRY_MAIN_FUNDS)
  private String countryMainFunds;

  public NaturalPerson() {
  }

  public NaturalPerson id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public NaturalPerson systemId(Integer systemId) {
    
    
    
    
    this.systemId = systemId;
    return this;
  }

   /**
   * Get systemId
   * @return systemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSystemId() {
    return systemId;
  }


  public void setSystemId(Integer systemId) {
    
    
    
    this.systemId = systemId;
  }


  public NaturalPerson firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public NaturalPerson lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public NaturalPerson middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public NaturalPerson dateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public NaturalPerson countryOrigin(String countryOrigin) {
    
    
    
    
    this.countryOrigin = countryOrigin;
    return this;
  }

   /**
   * Get countryOrigin
   * @return countryOrigin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryOrigin() {
    return countryOrigin;
  }


  public void setCountryOrigin(String countryOrigin) {
    
    
    
    this.countryOrigin = countryOrigin;
  }


  public NaturalPerson countryResidence(String countryResidence) {
    
    
    
    
    this.countryResidence = countryResidence;
    return this;
  }

   /**
   * Get countryResidence
   * @return countryResidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryResidence() {
    return countryResidence;
  }


  public void setCountryResidence(String countryResidence) {
    
    
    
    this.countryResidence = countryResidence;
  }


  public NaturalPerson countryMainFunds(String countryMainFunds) {
    
    
    
    
    this.countryMainFunds = countryMainFunds;
    return this;
  }

   /**
   * Get countryMainFunds
   * @return countryMainFunds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryMainFunds() {
    return countryMainFunds;
  }


  public void setCountryMainFunds(String countryMainFunds) {
    
    
    
    this.countryMainFunds = countryMainFunds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NaturalPerson instance itself
   */
  public NaturalPerson putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NaturalPerson naturalPerson = (NaturalPerson) o;
    return Objects.equals(this.id, naturalPerson.id) &&
        Objects.equals(this.systemId, naturalPerson.systemId) &&
        Objects.equals(this.firstName, naturalPerson.firstName) &&
        Objects.equals(this.lastName, naturalPerson.lastName) &&
        Objects.equals(this.middleName, naturalPerson.middleName) &&
        Objects.equals(this.dateOfBirth, naturalPerson.dateOfBirth) &&
        Objects.equals(this.countryOrigin, naturalPerson.countryOrigin) &&
        Objects.equals(this.countryResidence, naturalPerson.countryResidence) &&
        Objects.equals(this.countryMainFunds, naturalPerson.countryMainFunds)&&
        Objects.equals(this.additionalProperties, naturalPerson.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, systemId, firstName, lastName, middleName, dateOfBirth, countryOrigin, countryResidence, countryMainFunds, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NaturalPerson {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    countryOrigin: ").append(toIndentedString(countryOrigin)).append("\n");
    sb.append("    countryResidence: ").append(toIndentedString(countryResidence)).append("\n");
    sb.append("    countryMainFunds: ").append(toIndentedString(countryMainFunds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("systemId");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("dateOfBirth");
    openapiFields.add("countryOrigin");
    openapiFields.add("countryResidence");
    openapiFields.add("countryMainFunds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NaturalPerson
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NaturalPerson.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NaturalPerson is not found in the empty JSON string", NaturalPerson.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && (jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("countryOrigin").isJsonNull() && (jsonObj.get("countryOrigin") != null && !jsonObj.get("countryOrigin").isJsonNull()) && !jsonObj.get("countryOrigin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOrigin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOrigin").toString()));
      }
      if (!jsonObj.get("countryResidence").isJsonNull() && (jsonObj.get("countryResidence") != null && !jsonObj.get("countryResidence").isJsonNull()) && !jsonObj.get("countryResidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryResidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryResidence").toString()));
      }
      if (!jsonObj.get("countryMainFunds").isJsonNull() && (jsonObj.get("countryMainFunds") != null && !jsonObj.get("countryMainFunds").isJsonNull()) && !jsonObj.get("countryMainFunds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryMainFunds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryMainFunds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NaturalPerson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NaturalPerson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NaturalPerson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NaturalPerson.class));

       return (TypeAdapter<T>) new TypeAdapter<NaturalPerson>() {
           @Override
           public void write(JsonWriter out, NaturalPerson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NaturalPerson read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NaturalPerson instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NaturalPerson given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NaturalPerson
  * @throws IOException if the JSON string is invalid with respect to NaturalPerson
  */
  public static NaturalPerson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NaturalPerson.class);
  }

 /**
  * Convert an instance of NaturalPerson to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ENegativeReputationAnswers;
import com.konfigthis.client.model.EPepAnswers;
import com.konfigthis.client.model.ESanctionAnswers;
import com.konfigthis.client.model.EStatus;
import com.konfigthis.client.model.SumSubAmlVerificationHitResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SumSubAmlVerificationResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SumSubAmlVerificationResponse {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EStatus status;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = null;

  public static final String SERIALIZED_NAME_HAS_SANCTIONS = "hasSanctions";
  @SerializedName(SERIALIZED_NAME_HAS_SANCTIONS)
  private ESanctionAnswers hasSanctions;

  public static final String SERIALIZED_NAME_IS_PEP = "isPep";
  @SerializedName(SERIALIZED_NAME_IS_PEP)
  private EPepAnswers isPep;

  public static final String SERIALIZED_NAME_HAS_NEGATIVE_REPUTATION = "hasNegativeReputation";
  @SerializedName(SERIALIZED_NAME_HAS_NEGATIVE_REPUTATION)
  private ENegativeReputationAnswers hasNegativeReputation;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_HITS = "hits";
  @SerializedName(SERIALIZED_NAME_HITS)
  private List<SumSubAmlVerificationHitResponse> hits = null;

  public SumSubAmlVerificationResponse() {
  }

  public SumSubAmlVerificationResponse status(EStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EStatus getStatus() {
    return status;
  }


  public void setStatus(EStatus status) {
    
    
    
    this.status = status;
  }


  public SumSubAmlVerificationResponse categories(List<String> categories) {
    
    
    
    
    this.categories = categories;
    return this;
  }

  public SumSubAmlVerificationResponse addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCategories() {
    return categories;
  }


  public void setCategories(List<String> categories) {
    
    
    
    this.categories = categories;
  }


  public SumSubAmlVerificationResponse hasSanctions(ESanctionAnswers hasSanctions) {
    
    
    
    
    this.hasSanctions = hasSanctions;
    return this;
  }

   /**
   * Get hasSanctions
   * @return hasSanctions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ESanctionAnswers getHasSanctions() {
    return hasSanctions;
  }


  public void setHasSanctions(ESanctionAnswers hasSanctions) {
    
    
    
    this.hasSanctions = hasSanctions;
  }


  public SumSubAmlVerificationResponse isPep(EPepAnswers isPep) {
    
    
    
    
    this.isPep = isPep;
    return this;
  }

   /**
   * Get isPep
   * @return isPep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EPepAnswers getIsPep() {
    return isPep;
  }


  public void setIsPep(EPepAnswers isPep) {
    
    
    
    this.isPep = isPep;
  }


  public SumSubAmlVerificationResponse hasNegativeReputation(ENegativeReputationAnswers hasNegativeReputation) {
    
    
    
    
    this.hasNegativeReputation = hasNegativeReputation;
    return this;
  }

   /**
   * Get hasNegativeReputation
   * @return hasNegativeReputation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ENegativeReputationAnswers getHasNegativeReputation() {
    return hasNegativeReputation;
  }


  public void setHasNegativeReputation(ENegativeReputationAnswers hasNegativeReputation) {
    
    
    
    this.hasNegativeReputation = hasNegativeReputation;
  }


  public SumSubAmlVerificationResponse creationDate(OffsetDateTime creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public SumSubAmlVerificationResponse hits(List<SumSubAmlVerificationHitResponse> hits) {
    
    
    
    
    this.hits = hits;
    return this;
  }

  public SumSubAmlVerificationResponse addHitsItem(SumSubAmlVerificationHitResponse hitsItem) {
    if (this.hits == null) {
      this.hits = new ArrayList<>();
    }
    this.hits.add(hitsItem);
    return this;
  }

   /**
   * Get hits
   * @return hits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SumSubAmlVerificationHitResponse> getHits() {
    return hits;
  }


  public void setHits(List<SumSubAmlVerificationHitResponse> hits) {
    
    
    
    this.hits = hits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SumSubAmlVerificationResponse instance itself
   */
  public SumSubAmlVerificationResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SumSubAmlVerificationResponse sumSubAmlVerificationResponse = (SumSubAmlVerificationResponse) o;
    return Objects.equals(this.status, sumSubAmlVerificationResponse.status) &&
        Objects.equals(this.categories, sumSubAmlVerificationResponse.categories) &&
        Objects.equals(this.hasSanctions, sumSubAmlVerificationResponse.hasSanctions) &&
        Objects.equals(this.isPep, sumSubAmlVerificationResponse.isPep) &&
        Objects.equals(this.hasNegativeReputation, sumSubAmlVerificationResponse.hasNegativeReputation) &&
        Objects.equals(this.creationDate, sumSubAmlVerificationResponse.creationDate) &&
        Objects.equals(this.hits, sumSubAmlVerificationResponse.hits)&&
        Objects.equals(this.additionalProperties, sumSubAmlVerificationResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, categories, hasSanctions, isPep, hasNegativeReputation, creationDate, hits, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SumSubAmlVerificationResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    hasSanctions: ").append(toIndentedString(hasSanctions)).append("\n");
    sb.append("    isPep: ").append(toIndentedString(isPep)).append("\n");
    sb.append("    hasNegativeReputation: ").append(toIndentedString(hasNegativeReputation)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    hits: ").append(toIndentedString(hits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("categories");
    openapiFields.add("hasSanctions");
    openapiFields.add("isPep");
    openapiFields.add("hasNegativeReputation");
    openapiFields.add("creationDate");
    openapiFields.add("hits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SumSubAmlVerificationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SumSubAmlVerificationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SumSubAmlVerificationResponse is not found in the empty JSON string", SumSubAmlVerificationResponse.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string or null but got `%s`", jsonObj.get("categories").toString()));
      }
      if (jsonObj.get("hits") != null && !jsonObj.get("hits").isJsonNull()) {
        JsonArray jsonArrayhits = jsonObj.getAsJsonArray("hits");
        if (jsonArrayhits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hits` to be an array in the JSON string but got `%s`", jsonObj.get("hits").toString()));
          }

          // validate the optional field `hits` (array)
          for (int i = 0; i < jsonArrayhits.size(); i++) {
            SumSubAmlVerificationHitResponse.validateJsonObject(jsonArrayhits.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SumSubAmlVerificationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SumSubAmlVerificationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SumSubAmlVerificationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SumSubAmlVerificationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SumSubAmlVerificationResponse>() {
           @Override
           public void write(JsonWriter out, SumSubAmlVerificationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SumSubAmlVerificationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SumSubAmlVerificationResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SumSubAmlVerificationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SumSubAmlVerificationResponse
  * @throws IOException if the JSON string is invalid with respect to SumSubAmlVerificationResponse
  */
  public static SumSubAmlVerificationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SumSubAmlVerificationResponse.class);
  }

 /**
  * Convert an instance of SumSubAmlVerificationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


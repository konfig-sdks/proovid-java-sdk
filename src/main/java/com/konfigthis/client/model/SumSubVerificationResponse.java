/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SumSubAmlVerificationResponse;
import com.konfigthis.client.model.SumSubDocumentVerificationVerificationResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SumSubVerificationResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SumSubVerificationResponse {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_SCREENING = "screening";
  @SerializedName(SERIALIZED_NAME_SCREENING)
  private SumSubAmlVerificationResponse screening;

  public static final String SERIALIZED_NAME_ID_DOCUMENT = "idDocument";
  @SerializedName(SERIALIZED_NAME_ID_DOCUMENT)
  private SumSubDocumentVerificationVerificationResponse idDocument;

  public static final String SERIALIZED_NAME_FACE = "face";
  @SerializedName(SERIALIZED_NAME_FACE)
  private SumSubDocumentVerificationVerificationResponse face;

  public static final String SERIALIZED_NAME_ADDRESS_DOCUMENT = "addressDocument";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DOCUMENT)
  private SumSubDocumentVerificationVerificationResponse addressDocument;

  public SumSubVerificationResponse() {
  }

  public SumSubVerificationResponse creationDate(OffsetDateTime creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public SumSubVerificationResponse screening(SumSubAmlVerificationResponse screening) {
    
    
    
    
    this.screening = screening;
    return this;
  }

   /**
   * Get screening
   * @return screening
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SumSubAmlVerificationResponse getScreening() {
    return screening;
  }


  public void setScreening(SumSubAmlVerificationResponse screening) {
    
    
    
    this.screening = screening;
  }


  public SumSubVerificationResponse idDocument(SumSubDocumentVerificationVerificationResponse idDocument) {
    
    
    
    
    this.idDocument = idDocument;
    return this;
  }

   /**
   * Get idDocument
   * @return idDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SumSubDocumentVerificationVerificationResponse getIdDocument() {
    return idDocument;
  }


  public void setIdDocument(SumSubDocumentVerificationVerificationResponse idDocument) {
    
    
    
    this.idDocument = idDocument;
  }


  public SumSubVerificationResponse face(SumSubDocumentVerificationVerificationResponse face) {
    
    
    
    
    this.face = face;
    return this;
  }

   /**
   * Get face
   * @return face
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SumSubDocumentVerificationVerificationResponse getFace() {
    return face;
  }


  public void setFace(SumSubDocumentVerificationVerificationResponse face) {
    
    
    
    this.face = face;
  }


  public SumSubVerificationResponse addressDocument(SumSubDocumentVerificationVerificationResponse addressDocument) {
    
    
    
    
    this.addressDocument = addressDocument;
    return this;
  }

   /**
   * Get addressDocument
   * @return addressDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SumSubDocumentVerificationVerificationResponse getAddressDocument() {
    return addressDocument;
  }


  public void setAddressDocument(SumSubDocumentVerificationVerificationResponse addressDocument) {
    
    
    
    this.addressDocument = addressDocument;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SumSubVerificationResponse instance itself
   */
  public SumSubVerificationResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SumSubVerificationResponse sumSubVerificationResponse = (SumSubVerificationResponse) o;
    return Objects.equals(this.creationDate, sumSubVerificationResponse.creationDate) &&
        Objects.equals(this.screening, sumSubVerificationResponse.screening) &&
        Objects.equals(this.idDocument, sumSubVerificationResponse.idDocument) &&
        Objects.equals(this.face, sumSubVerificationResponse.face) &&
        Objects.equals(this.addressDocument, sumSubVerificationResponse.addressDocument)&&
        Objects.equals(this.additionalProperties, sumSubVerificationResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, screening, idDocument, face, addressDocument, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SumSubVerificationResponse {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    screening: ").append(toIndentedString(screening)).append("\n");
    sb.append("    idDocument: ").append(toIndentedString(idDocument)).append("\n");
    sb.append("    face: ").append(toIndentedString(face)).append("\n");
    sb.append("    addressDocument: ").append(toIndentedString(addressDocument)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("screening");
    openapiFields.add("idDocument");
    openapiFields.add("face");
    openapiFields.add("addressDocument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SumSubVerificationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SumSubVerificationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SumSubVerificationResponse is not found in the empty JSON string", SumSubVerificationResponse.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `screening`
      if (jsonObj.get("screening") != null && !jsonObj.get("screening").isJsonNull()) {
        SumSubAmlVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("screening"));
      }
      // validate the optional field `idDocument`
      if (jsonObj.get("idDocument") != null && !jsonObj.get("idDocument").isJsonNull()) {
        SumSubDocumentVerificationVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("idDocument"));
      }
      // validate the optional field `face`
      if (jsonObj.get("face") != null && !jsonObj.get("face").isJsonNull()) {
        SumSubDocumentVerificationVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("face"));
      }
      // validate the optional field `addressDocument`
      if (jsonObj.get("addressDocument") != null && !jsonObj.get("addressDocument").isJsonNull()) {
        SumSubDocumentVerificationVerificationResponse.validateJsonObject(jsonObj.getAsJsonObject("addressDocument"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SumSubVerificationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SumSubVerificationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SumSubVerificationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SumSubVerificationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SumSubVerificationResponse>() {
           @Override
           public void write(JsonWriter out, SumSubVerificationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SumSubVerificationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SumSubVerificationResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SumSubVerificationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SumSubVerificationResponse
  * @throws IOException if the JSON string is invalid with respect to SumSubVerificationResponse
  */
  public static SumSubVerificationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SumSubVerificationResponse.class);
  }

 /**
  * Convert an instance of SumSubVerificationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


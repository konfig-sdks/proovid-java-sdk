/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Geolocation
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Geolocation {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_RDNS = "rdns";
  @SerializedName(SERIALIZED_NAME_RDNS)
  private String rdns;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private String asn;

  public static final String SERIALIZED_NAME_ISP = "isp";
  @SerializedName(SERIALIZED_NAME_ISP)
  private String isp;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_REGION_NAME = "regionName";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  private String regionName;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_CONTINENT_NAME = "continentName";
  @SerializedName(SERIALIZED_NAME_CONTINENT_NAME)
  private String continentName;

  public static final String SERIALIZED_NAME_CONTINENT_CODE = "continentCode";
  @SerializedName(SERIALIZED_NAME_CONTINENT_CODE)
  private String continentCode;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_METRO_CODE = "metroCode";
  @SerializedName(SERIALIZED_NAME_METRO_CODE)
  private String metroCode;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public Geolocation() {
  }

  public Geolocation host(String host) {
    
    
    
    
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    
    
    
    this.host = host;
  }


  public Geolocation ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public Geolocation rdns(String rdns) {
    
    
    
    
    this.rdns = rdns;
    return this;
  }

   /**
   * Get rdns
   * @return rdns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRdns() {
    return rdns;
  }


  public void setRdns(String rdns) {
    
    
    
    this.rdns = rdns;
  }


  public Geolocation asn(String asn) {
    
    
    
    
    this.asn = asn;
    return this;
  }

   /**
   * Get asn
   * @return asn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAsn() {
    return asn;
  }


  public void setAsn(String asn) {
    
    
    
    this.asn = asn;
  }


  public Geolocation isp(String isp) {
    
    
    
    
    this.isp = isp;
    return this;
  }

   /**
   * Get isp
   * @return isp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIsp() {
    return isp;
  }


  public void setIsp(String isp) {
    
    
    
    this.isp = isp;
  }


  public Geolocation countryName(String countryName) {
    
    
    
    
    this.countryName = countryName;
    return this;
  }

   /**
   * Get countryName
   * @return countryName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryName() {
    return countryName;
  }


  public void setCountryName(String countryName) {
    
    
    
    this.countryName = countryName;
  }


  public Geolocation countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public Geolocation regionName(String regionName) {
    
    
    
    
    this.regionName = regionName;
    return this;
  }

   /**
   * Get regionName
   * @return regionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegionName() {
    return regionName;
  }


  public void setRegionName(String regionName) {
    
    
    
    this.regionName = regionName;
  }


  public Geolocation regionCode(String regionCode) {
    
    
    
    
    this.regionCode = regionCode;
    return this;
  }

   /**
   * Get regionCode
   * @return regionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegionCode() {
    return regionCode;
  }


  public void setRegionCode(String regionCode) {
    
    
    
    this.regionCode = regionCode;
  }


  public Geolocation city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public Geolocation postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public Geolocation continentName(String continentName) {
    
    
    
    
    this.continentName = continentName;
    return this;
  }

   /**
   * Get continentName
   * @return continentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContinentName() {
    return continentName;
  }


  public void setContinentName(String continentName) {
    
    
    
    this.continentName = continentName;
  }


  public Geolocation continentCode(String continentCode) {
    
    
    
    
    this.continentCode = continentCode;
    return this;
  }

   /**
   * Get continentCode
   * @return continentCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContinentCode() {
    return continentCode;
  }


  public void setContinentCode(String continentCode) {
    
    
    
    this.continentCode = continentCode;
  }


  public Geolocation latitude(String latitude) {
    
    
    
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLatitude() {
    return latitude;
  }


  public void setLatitude(String latitude) {
    
    
    
    this.latitude = latitude;
  }


  public Geolocation longitude(String longitude) {
    
    
    
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLongitude() {
    return longitude;
  }


  public void setLongitude(String longitude) {
    
    
    
    this.longitude = longitude;
  }


  public Geolocation metroCode(String metroCode) {
    
    
    
    
    this.metroCode = metroCode;
    return this;
  }

   /**
   * Get metroCode
   * @return metroCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMetroCode() {
    return metroCode;
  }


  public void setMetroCode(String metroCode) {
    
    
    
    this.metroCode = metroCode;
  }


  public Geolocation timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Geolocation instance itself
   */
  public Geolocation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Geolocation geolocation = (Geolocation) o;
    return Objects.equals(this.host, geolocation.host) &&
        Objects.equals(this.ip, geolocation.ip) &&
        Objects.equals(this.rdns, geolocation.rdns) &&
        Objects.equals(this.asn, geolocation.asn) &&
        Objects.equals(this.isp, geolocation.isp) &&
        Objects.equals(this.countryName, geolocation.countryName) &&
        Objects.equals(this.countryCode, geolocation.countryCode) &&
        Objects.equals(this.regionName, geolocation.regionName) &&
        Objects.equals(this.regionCode, geolocation.regionCode) &&
        Objects.equals(this.city, geolocation.city) &&
        Objects.equals(this.postalCode, geolocation.postalCode) &&
        Objects.equals(this.continentName, geolocation.continentName) &&
        Objects.equals(this.continentCode, geolocation.continentCode) &&
        Objects.equals(this.latitude, geolocation.latitude) &&
        Objects.equals(this.longitude, geolocation.longitude) &&
        Objects.equals(this.metroCode, geolocation.metroCode) &&
        Objects.equals(this.timezone, geolocation.timezone)&&
        Objects.equals(this.additionalProperties, geolocation.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, ip, rdns, asn, isp, countryName, countryCode, regionName, regionCode, city, postalCode, continentName, continentCode, latitude, longitude, metroCode, timezone, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Geolocation {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    rdns: ").append(toIndentedString(rdns)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    isp: ").append(toIndentedString(isp)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    continentName: ").append(toIndentedString(continentName)).append("\n");
    sb.append("    continentCode: ").append(toIndentedString(continentCode)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    metroCode: ").append(toIndentedString(metroCode)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("ip");
    openapiFields.add("rdns");
    openapiFields.add("asn");
    openapiFields.add("isp");
    openapiFields.add("countryName");
    openapiFields.add("countryCode");
    openapiFields.add("regionName");
    openapiFields.add("regionCode");
    openapiFields.add("city");
    openapiFields.add("postalCode");
    openapiFields.add("continentName");
    openapiFields.add("continentCode");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("metroCode");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Geolocation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Geolocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Geolocation is not found in the empty JSON string", Geolocation.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("host").isJsonNull() && (jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (!jsonObj.get("ip").isJsonNull() && (jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("rdns").isJsonNull() && (jsonObj.get("rdns") != null && !jsonObj.get("rdns").isJsonNull()) && !jsonObj.get("rdns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdns").toString()));
      }
      if (!jsonObj.get("asn").isJsonNull() && (jsonObj.get("asn") != null && !jsonObj.get("asn").isJsonNull()) && !jsonObj.get("asn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn").toString()));
      }
      if (!jsonObj.get("isp").isJsonNull() && (jsonObj.get("isp") != null && !jsonObj.get("isp").isJsonNull()) && !jsonObj.get("isp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isp").toString()));
      }
      if (!jsonObj.get("countryName").isJsonNull() && (jsonObj.get("countryName") != null && !jsonObj.get("countryName").isJsonNull()) && !jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonNull() && (jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("regionName").isJsonNull() && (jsonObj.get("regionName") != null && !jsonObj.get("regionName").isJsonNull()) && !jsonObj.get("regionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionName").toString()));
      }
      if (!jsonObj.get("regionCode").isJsonNull() && (jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
      if (!jsonObj.get("city").isJsonNull() && (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonNull() && (jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (!jsonObj.get("continentName").isJsonNull() && (jsonObj.get("continentName") != null && !jsonObj.get("continentName").isJsonNull()) && !jsonObj.get("continentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continentName").toString()));
      }
      if (!jsonObj.get("continentCode").isJsonNull() && (jsonObj.get("continentCode") != null && !jsonObj.get("continentCode").isJsonNull()) && !jsonObj.get("continentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continentCode").toString()));
      }
      if (!jsonObj.get("latitude").isJsonNull() && (jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if (!jsonObj.get("longitude").isJsonNull() && (jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if (!jsonObj.get("metroCode").isJsonNull() && (jsonObj.get("metroCode") != null && !jsonObj.get("metroCode").isJsonNull()) && !jsonObj.get("metroCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metroCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metroCode").toString()));
      }
      if (!jsonObj.get("timezone").isJsonNull() && (jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Geolocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Geolocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Geolocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Geolocation.class));

       return (TypeAdapter<T>) new TypeAdapter<Geolocation>() {
           @Override
           public void write(JsonWriter out, Geolocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Geolocation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Geolocation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Geolocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Geolocation
  * @throws IOException if the JSON string is invalid with respect to Geolocation
  */
  public static Geolocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Geolocation.class);
  }

 /**
  * Convert an instance of Geolocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


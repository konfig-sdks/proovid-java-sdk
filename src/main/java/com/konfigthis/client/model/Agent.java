/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Agent
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Agent {
  public static final String SERIALIZED_NAME_IS_DESKTOP = "isDesktop";
  @SerializedName(SERIALIZED_NAME_IS_DESKTOP)
  private Boolean isDesktop;

  public static final String SERIALIZED_NAME_IS_PHONE = "isPhone";
  @SerializedName(SERIALIZED_NAME_IS_PHONE)
  private Boolean isPhone;

  public static final String SERIALIZED_NAME_USERAGENT = "useragent";
  @SerializedName(SERIALIZED_NAME_USERAGENT)
  private String useragent;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_BROWSER_NAME = "browserName";
  @SerializedName(SERIALIZED_NAME_BROWSER_NAME)
  private String browserName;

  public static final String SERIALIZED_NAME_PLATFORM_NAME = "platformName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
  private String platformName;

  public Agent() {
  }

  public Agent isDesktop(Boolean isDesktop) {
    
    
    
    
    this.isDesktop = isDesktop;
    return this;
  }

   /**
   * Get isDesktop
   * @return isDesktop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsDesktop() {
    return isDesktop;
  }


  public void setIsDesktop(Boolean isDesktop) {
    
    
    
    this.isDesktop = isDesktop;
  }


  public Agent isPhone(Boolean isPhone) {
    
    
    
    
    this.isPhone = isPhone;
    return this;
  }

   /**
   * Get isPhone
   * @return isPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPhone() {
    return isPhone;
  }


  public void setIsPhone(Boolean isPhone) {
    
    
    
    this.isPhone = isPhone;
  }


  public Agent useragent(String useragent) {
    
    
    
    
    this.useragent = useragent;
    return this;
  }

   /**
   * Get useragent
   * @return useragent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUseragent() {
    return useragent;
  }


  public void setUseragent(String useragent) {
    
    
    
    this.useragent = useragent;
  }


  public Agent deviceName(String deviceName) {
    
    
    
    
    this.deviceName = deviceName;
    return this;
  }

   /**
   * Get deviceName
   * @return deviceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeviceName() {
    return deviceName;
  }


  public void setDeviceName(String deviceName) {
    
    
    
    this.deviceName = deviceName;
  }


  public Agent browserName(String browserName) {
    
    
    
    
    this.browserName = browserName;
    return this;
  }

   /**
   * Get browserName
   * @return browserName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBrowserName() {
    return browserName;
  }


  public void setBrowserName(String browserName) {
    
    
    
    this.browserName = browserName;
  }


  public Agent platformName(String platformName) {
    
    
    
    
    this.platformName = platformName;
    return this;
  }

   /**
   * Get platformName
   * @return platformName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlatformName() {
    return platformName;
  }


  public void setPlatformName(String platformName) {
    
    
    
    this.platformName = platformName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Agent instance itself
   */
  public Agent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Agent agent = (Agent) o;
    return Objects.equals(this.isDesktop, agent.isDesktop) &&
        Objects.equals(this.isPhone, agent.isPhone) &&
        Objects.equals(this.useragent, agent.useragent) &&
        Objects.equals(this.deviceName, agent.deviceName) &&
        Objects.equals(this.browserName, agent.browserName) &&
        Objects.equals(this.platformName, agent.platformName)&&
        Objects.equals(this.additionalProperties, agent.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDesktop, isPhone, useragent, deviceName, browserName, platformName, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Agent {\n");
    sb.append("    isDesktop: ").append(toIndentedString(isDesktop)).append("\n");
    sb.append("    isPhone: ").append(toIndentedString(isPhone)).append("\n");
    sb.append("    useragent: ").append(toIndentedString(useragent)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    browserName: ").append(toIndentedString(browserName)).append("\n");
    sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isDesktop");
    openapiFields.add("isPhone");
    openapiFields.add("useragent");
    openapiFields.add("deviceName");
    openapiFields.add("browserName");
    openapiFields.add("platformName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Agent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Agent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Agent is not found in the empty JSON string", Agent.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("useragent").isJsonNull() && (jsonObj.get("useragent") != null && !jsonObj.get("useragent").isJsonNull()) && !jsonObj.get("useragent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `useragent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("useragent").toString()));
      }
      if (!jsonObj.get("deviceName").isJsonNull() && (jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) && !jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if (!jsonObj.get("browserName").isJsonNull() && (jsonObj.get("browserName") != null && !jsonObj.get("browserName").isJsonNull()) && !jsonObj.get("browserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserName").toString()));
      }
      if (!jsonObj.get("platformName").isJsonNull() && (jsonObj.get("platformName") != null && !jsonObj.get("platformName").isJsonNull()) && !jsonObj.get("platformName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Agent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Agent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Agent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Agent.class));

       return (TypeAdapter<T>) new TypeAdapter<Agent>() {
           @Override
           public void write(JsonWriter out, Agent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Agent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Agent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Agent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Agent
  * @throws IOException if the JSON string is invalid with respect to Agent
  */
  public static Agent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Agent.class);
  }

 /**
  * Convert an instance of Agent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


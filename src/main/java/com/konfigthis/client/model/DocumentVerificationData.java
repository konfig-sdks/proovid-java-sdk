/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DocumentVerificationData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DocumentVerificationData {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "issueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private OffsetDateTime issueDate;

  public static final String SERIALIZED_NAME_EXPIRED_DATE = "expiredDate";
  @SerializedName(SERIALIZED_NAME_EXPIRED_DATE)
  private OffsetDateTime expiredDate;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private OffsetDateTime dob;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_COUNTRY_BIRTH = "countryBirth";
  @SerializedName(SERIALIZED_NAME_COUNTRY_BIRTH)
  private String countryBirth;

  public static final String SERIALIZED_NAME_COUNTRY_DOCUMENT = "countryDocument";
  @SerializedName(SERIALIZED_NAME_COUNTRY_DOCUMENT)
  private String countryDocument;

  public static final String SERIALIZED_NAME_FACE_MATCH_CONFIDENCE = "faceMatchConfidence";
  @SerializedName(SERIALIZED_NAME_FACE_MATCH_CONFIDENCE)
  private Integer faceMatchConfidence;

  public DocumentVerificationData() {
  }

  public DocumentVerificationData firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public DocumentVerificationData lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public DocumentVerificationData middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public DocumentVerificationData fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public DocumentVerificationData documentNumber(String documentNumber) {
    
    
    
    
    this.documentNumber = documentNumber;
    return this;
  }

   /**
   * Get documentNumber
   * @return documentNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentNumber() {
    return documentNumber;
  }


  public void setDocumentNumber(String documentNumber) {
    
    
    
    this.documentNumber = documentNumber;
  }


  public DocumentVerificationData issueDate(OffsetDateTime issueDate) {
    
    
    
    
    this.issueDate = issueDate;
    return this;
  }

   /**
   * Get issueDate
   * @return issueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getIssueDate() {
    return issueDate;
  }


  public void setIssueDate(OffsetDateTime issueDate) {
    
    
    
    this.issueDate = issueDate;
  }


  public DocumentVerificationData expiredDate(OffsetDateTime expiredDate) {
    
    
    
    
    this.expiredDate = expiredDate;
    return this;
  }

   /**
   * Get expiredDate
   * @return expiredDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExpiredDate() {
    return expiredDate;
  }


  public void setExpiredDate(OffsetDateTime expiredDate) {
    
    
    
    this.expiredDate = expiredDate;
  }


  public DocumentVerificationData dob(OffsetDateTime dob) {
    
    
    
    
    this.dob = dob;
    return this;
  }

   /**
   * Get dob
   * @return dob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDob() {
    return dob;
  }


  public void setDob(OffsetDateTime dob) {
    
    
    
    this.dob = dob;
  }


  public DocumentVerificationData documentType(String documentType) {
    
    
    
    
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentType() {
    return documentType;
  }


  public void setDocumentType(String documentType) {
    
    
    
    this.documentType = documentType;
  }


  public DocumentVerificationData countryBirth(String countryBirth) {
    
    
    
    
    this.countryBirth = countryBirth;
    return this;
  }

   /**
   * Get countryBirth
   * @return countryBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryBirth() {
    return countryBirth;
  }


  public void setCountryBirth(String countryBirth) {
    
    
    
    this.countryBirth = countryBirth;
  }


  public DocumentVerificationData countryDocument(String countryDocument) {
    
    
    
    
    this.countryDocument = countryDocument;
    return this;
  }

   /**
   * Get countryDocument
   * @return countryDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryDocument() {
    return countryDocument;
  }


  public void setCountryDocument(String countryDocument) {
    
    
    
    this.countryDocument = countryDocument;
  }


  public DocumentVerificationData faceMatchConfidence(Integer faceMatchConfidence) {
    
    
    
    
    this.faceMatchConfidence = faceMatchConfidence;
    return this;
  }

   /**
   * Get faceMatchConfidence
   * @return faceMatchConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFaceMatchConfidence() {
    return faceMatchConfidence;
  }


  public void setFaceMatchConfidence(Integer faceMatchConfidence) {
    
    
    
    this.faceMatchConfidence = faceMatchConfidence;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DocumentVerificationData instance itself
   */
  public DocumentVerificationData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentVerificationData documentVerificationData = (DocumentVerificationData) o;
    return Objects.equals(this.firstName, documentVerificationData.firstName) &&
        Objects.equals(this.lastName, documentVerificationData.lastName) &&
        Objects.equals(this.middleName, documentVerificationData.middleName) &&
        Objects.equals(this.fullName, documentVerificationData.fullName) &&
        Objects.equals(this.documentNumber, documentVerificationData.documentNumber) &&
        Objects.equals(this.issueDate, documentVerificationData.issueDate) &&
        Objects.equals(this.expiredDate, documentVerificationData.expiredDate) &&
        Objects.equals(this.dob, documentVerificationData.dob) &&
        Objects.equals(this.documentType, documentVerificationData.documentType) &&
        Objects.equals(this.countryBirth, documentVerificationData.countryBirth) &&
        Objects.equals(this.countryDocument, documentVerificationData.countryDocument) &&
        Objects.equals(this.faceMatchConfidence, documentVerificationData.faceMatchConfidence)&&
        Objects.equals(this.additionalProperties, documentVerificationData.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, middleName, fullName, documentNumber, issueDate, expiredDate, dob, documentType, countryBirth, countryDocument, faceMatchConfidence, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentVerificationData {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    expiredDate: ").append(toIndentedString(expiredDate)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    countryBirth: ").append(toIndentedString(countryBirth)).append("\n");
    sb.append("    countryDocument: ").append(toIndentedString(countryDocument)).append("\n");
    sb.append("    faceMatchConfidence: ").append(toIndentedString(faceMatchConfidence)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("fullName");
    openapiFields.add("documentNumber");
    openapiFields.add("issueDate");
    openapiFields.add("expiredDate");
    openapiFields.add("dob");
    openapiFields.add("documentType");
    openapiFields.add("countryBirth");
    openapiFields.add("countryDocument");
    openapiFields.add("faceMatchConfidence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentVerificationData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DocumentVerificationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentVerificationData is not found in the empty JSON string", DocumentVerificationData.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && (jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("fullName").isJsonNull() && (jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if (!jsonObj.get("documentNumber").isJsonNull() && (jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) && !jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      if (!jsonObj.get("documentType").isJsonNull() && (jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if (!jsonObj.get("countryBirth").isJsonNull() && (jsonObj.get("countryBirth") != null && !jsonObj.get("countryBirth").isJsonNull()) && !jsonObj.get("countryBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryBirth").toString()));
      }
      if (!jsonObj.get("countryDocument").isJsonNull() && (jsonObj.get("countryDocument") != null && !jsonObj.get("countryDocument").isJsonNull()) && !jsonObj.get("countryDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryDocument").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentVerificationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentVerificationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentVerificationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentVerificationData.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentVerificationData>() {
           @Override
           public void write(JsonWriter out, DocumentVerificationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentVerificationData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DocumentVerificationData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentVerificationData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentVerificationData
  * @throws IOException if the JSON string is invalid with respect to DocumentVerificationData
  */
  public static DocumentVerificationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentVerificationData.class);
  }

 /**
  * Convert an instance of DocumentVerificationData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Proovid Electronic Verification
 * Proovid API is a RESTful application that specializes in electronic verification (Proof of address and Proof of Identity) by employing an advanced risk-tiered approacch in combination with a smart Risk assessment system. <a href='docs/PROOVid_ELV.pdf' target='_blank'>More information</a> 
 *
 * The version of the OpenAPI document: v1
 * Contact: info@proovid.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddNaturalPersonInfoRequest;
import com.konfigthis.client.model.AddNaturalPersonRequest;
import com.konfigthis.client.model.AddNaturalPersonResponseBaseResponse;
import com.konfigthis.client.model.AmlReport;
import com.konfigthis.client.model.BaseResponse;
import com.konfigthis.client.model.DeleteAmlReport;
import com.konfigthis.client.model.EGender;
import com.konfigthis.client.model.EScore;
import java.io.File;
import com.konfigthis.client.model.NaturalPersonDocumentRequest;
import com.konfigthis.client.model.NaturalPersonDocumentsRequest;
import com.konfigthis.client.model.NaturalPersonIdDocumentRequest;
import com.konfigthis.client.model.NaturalPersonInfoResponseBaseResponse;
import com.konfigthis.client.model.NaturalPersonResponseBaseResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SumSubVerificationResponseBaseResponse;
import com.konfigthis.client.model.SumSubVerificationResponseListBaseResponse;
import com.konfigthis.client.model.UpdateNaturalPersonDocumentsResponseBaseResponse;
import com.konfigthis.client.model.UpdateNaturalPersonEconomicProfileRequest;
import com.konfigthis.client.model.UpdateNaturalPersonInfoRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NaturalPersonApi
 */
@Disabled
public class NaturalPersonApiTest {

    private static NaturalPersonApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new NaturalPersonApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateTest() throws ApiException {
        AddNaturalPersonInfoRequest info = null;
        String clientReferenceId = null;
        NaturalPersonDocumentsRequest documents = null;
        AddNaturalPersonResponseBaseResponse response = api.createOrUpdate()
                .info(info)
                .clientReferenceId(clientReferenceId)
                .documents(documents)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        Long id = null;
        DeleteAmlReport response = api.deleteById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Long id = null;
        AmlReport response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getById_0Test() throws ApiException {
        String reference = null;
        AmlReport response = api.getById_0(reference)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateTest() throws ApiException {
        Long naturalPersonId = null;
        File response = api.getCertificate(naturalPersonId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        Long naturalPersonId = null;
        NaturalPersonResponseBaseResponse response = api.getDetails(naturalPersonId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVerificationRecordTest() throws ApiException {
        Long verificationId = null;
        NaturalPersonInfoResponseBaseResponse response = api.getVerificationRecord(verificationId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVerificationsTest() throws ApiException {
        Long naturalPersonId = null;
        SumSubVerificationResponseListBaseResponse response = api.getVerifications(naturalPersonId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        Long naturalPersonId = null;
        BaseResponse response = api.removeById(naturalPersonId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentsTest() throws ApiException {
        Long naturalPersonId = null;
        NaturalPersonIdDocumentRequest idDocument = null;
        NaturalPersonDocumentRequest addressDocument = null;
        UpdateNaturalPersonDocumentsResponseBaseResponse response = api.updateDocuments(naturalPersonId)
                .idDocument(idDocument)
                .addressDocument(addressDocument)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInformationTest() throws ApiException {
        Long naturalPersonId = null;
        String clientReferenceId = null;
        String taxId = null;
        String firstName = null;
        String lastName = null;
        String middleName = null;
        String legalName = null;
        OffsetDateTime dateOfBirth = null;
        EGender gender = null;
        String countryBirth = null;
        String countryResidence = null;
        String countryMainBusiness = null;
        String nationality = null;
        String email = null;
        String emailTwo = null;
        String mobilePhone = null;
        String mobilePhoneTwo = null;
        Boolean automaticallyUpdateNPRisk = null;
        EScore riskLevel = null;
        String riskLevelJustification = null;
        Boolean isFlagged = null;
        String comments = null;
        UpdateNaturalPersonEconomicProfileRequest economicProfile = null;
        NaturalPersonInfoResponseBaseResponse response = api.updateInformation(naturalPersonId)
                .clientReferenceId(clientReferenceId)
                .taxId(taxId)
                .firstName(firstName)
                .lastName(lastName)
                .middleName(middleName)
                .legalName(legalName)
                .dateOfBirth(dateOfBirth)
                .gender(gender)
                .countryBirth(countryBirth)
                .countryResidence(countryResidence)
                .countryMainBusiness(countryMainBusiness)
                .nationality(nationality)
                .email(email)
                .emailTwo(emailTwo)
                .mobilePhone(mobilePhone)
                .mobilePhoneTwo(mobilePhoneTwo)
                .automaticallyUpdateNPRisk(automaticallyUpdateNPRisk)
                .riskLevel(riskLevel)
                .riskLevelJustification(riskLevelJustification)
                .isFlagged(isFlagged)
                .comments(comments)
                .economicProfile(economicProfile)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyDetailsTest() throws ApiException {
        AddNaturalPersonInfoRequest info = null;
        String clientReferenceId = null;
        NaturalPersonDocumentsRequest documents = null;
        AddNaturalPersonResponseBaseResponse response = api.verifyDetails()
                .info(info)
                .clientReferenceId(clientReferenceId)
                .documents(documents)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyDetails_0Test() throws ApiException {
        Long naturalPersonId = null;
        SumSubVerificationResponseBaseResponse response = api.verifyDetails_0(naturalPersonId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyDocumentsTest() throws ApiException {
        Long naturalPersonId = null;
        NaturalPersonIdDocumentRequest idDocument = null;
        NaturalPersonDocumentRequest addressDocument = null;
        UpdateNaturalPersonDocumentsResponseBaseResponse response = api.verifyDocuments(naturalPersonId)
                .idDocument(idDocument)
                .addressDocument(addressDocument)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyEntityTest() throws ApiException {
        AddNaturalPersonInfoRequest info = null;
        String clientReferenceId = null;
        NaturalPersonDocumentsRequest documents = null;
        AddNaturalPersonResponseBaseResponse response = api.verifyEntity()
                .info(info)
                .clientReferenceId(clientReferenceId)
                .documents(documents)
                .execute();
        // TODO: test validations
    }

}
